{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](..#contributors-) Python API for Photoshop. The example above was created with Photoshop Python API. Check it out at https://loonghao.github.io/photoshop-python-api/examples . Has been tested and used Photoshop version: Photoshop Version Supported 2021 \u2705 2020 \u2705 cc2019 \u2705 cc2018 \u2705 cc2017 \u2705 Installing You can install via pip. pip install photoshop_python_api Since it uses COM (Component Object Model) connect Photoshop, it can be used in any DCC software with a python interpreter. Hello World import photoshop.api as ps app = ps . Application () doc = app . documents . add () new_doc = doc . artLayers . add () text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = new_doc new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) # # save to jpg jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Photoshop Session Use it as context. from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Contributors \u2728 Thanks goes to these wonderful people ( emoji key ): Hal \ud83d\udcbb voodraizer \ud83d\udc1b brunosly \ud83d\udc1b tubi \ud83d\udc1b wjxiehaixin \ud83d\udc1b \u7f57\u9a6c\u949f \ud83d\udc1b clement \ud83d\udc1b krevlinmen \ud83d\udc1b Thomas \ud83d\udc1b CaptainCsaba \ud83d\udc1b Il Harper \ud83d\udcbb This project follows the all-contributors specification. Contributions of any kind are welcome! how to get Photoshop program ID PS> Get-ChildItem \"HKLM:\\SOFTWARE\\Classes\" | ?{ ($_.PSChildName -match \"^[a-z]+\\.[a-z]+(\\.\\d+)?$\") -and ($_.GetSubKeyNames() -contains \"CLSID\") } | ?{ $_.PSChildName -match \"Photoshop.Application\" } | ft PSChildName How to get a list of COM objects from the registry Useful links https://theiviaxx.github.io/photoshop-docs/Photoshop/ http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/photoshop/pdfs/photoshop-cc-javascript-ref-2015.pdf https://github.com/lohriialo/photoshop-scripting-python https://www.adobe.com/devnet/photoshop/scripting.html https://www.youtube.com/playlist?list=PLUEniN8BpU8-Qmjyv3zyWaNvDYwJOJZ4m http://yearbook.github.io/esdocs/#/Photoshop/Application http://www.shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://www.tonton-pixel.com/wp-content/uploads/DecisionTable.pdf http://jongware.mit.edu/pscs5js_html/psjscs5/pc_Application.html https://indd.adobe.com/view/a0207571-ff5b-4bbf-a540-07079bd21d75 http://shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://web.archive.org/web/20140121053819/http://www.pcpix.com/Photoshop/char.html http://www.tonton-pixel.com/scripts/utility-scripts/get-equivalent-id-code/index.html https://github.com/Adobe-CEP/Samples/tree/master/PhotoshopEvents https://evanmccall.wordpress.com/2015/03/09/how-to-develop-photoshop-tools-in-python","title":"Introduction"},{"location":"#installing","text":"You can install via pip. pip install photoshop_python_api Since it uses COM (Component Object Model) connect Photoshop, it can be used in any DCC software with a python interpreter.","title":"Installing"},{"location":"#hello-world","text":"import photoshop.api as ps app = ps . Application () doc = app . documents . add () new_doc = doc . artLayers . add () text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = new_doc new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) # # save to jpg jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"Hello World"},{"location":"#photoshop-session","text":"Use it as context. from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"Photoshop Session"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Hal \ud83d\udcbb voodraizer \ud83d\udc1b brunosly \ud83d\udc1b tubi \ud83d\udc1b wjxiehaixin \ud83d\udc1b \u7f57\u9a6c\u949f \ud83d\udc1b clement \ud83d\udc1b krevlinmen \ud83d\udc1b Thomas \ud83d\udc1b CaptainCsaba \ud83d\udc1b Il Harper \ud83d\udcbb This project follows the all-contributors specification. Contributions of any kind are welcome!","title":"Contributors \u2728"},{"location":"#how-to-get-photoshop-program-id","text":"PS> Get-ChildItem \"HKLM:\\SOFTWARE\\Classes\" | ?{ ($_.PSChildName -match \"^[a-z]+\\.[a-z]+(\\.\\d+)?$\") -and ($_.GetSubKeyNames() -contains \"CLSID\") } | ?{ $_.PSChildName -match \"Photoshop.Application\" } | ft PSChildName How to get a list of COM objects from the registry","title":"how to get Photoshop program ID"},{"location":"#useful-links","text":"https://theiviaxx.github.io/photoshop-docs/Photoshop/ http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/photoshop/pdfs/photoshop-cc-javascript-ref-2015.pdf https://github.com/lohriialo/photoshop-scripting-python https://www.adobe.com/devnet/photoshop/scripting.html https://www.youtube.com/playlist?list=PLUEniN8BpU8-Qmjyv3zyWaNvDYwJOJZ4m http://yearbook.github.io/esdocs/#/Photoshop/Application http://www.shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://www.tonton-pixel.com/wp-content/uploads/DecisionTable.pdf http://jongware.mit.edu/pscs5js_html/psjscs5/pc_Application.html https://indd.adobe.com/view/a0207571-ff5b-4bbf-a540-07079bd21d75 http://shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://web.archive.org/web/20140121053819/http://www.pcpix.com/Photoshop/char.html http://www.tonton-pixel.com/scripts/utility-scripts/get-equivalent-id-code/index.html https://github.com/Adobe-CEP/Samples/tree/master/PhotoshopEvents https://evanmccall.wordpress.com/2015/03/09/how-to-develop-photoshop-tools-in-python","title":"Useful links"},{"location":"api/","text":"photoshop api active_layer artlayer artlayers channel channels core document documentinfo documents layerComp layerComps layers layerSet layerSets measurement_log notifier notifiers preferences selection text_fonts action_descriptor action_list action_reference application colors cmyk gray hsb lab rgb constants enumerations errors event_id open_options eps save_options bmp eps gif jpg pdf png psd tag tif solid_color text_font text_item session","title":"API"},{"location":"examples/","text":"Examples Active Layer # Set the active layer to the last art layer of the active document, or the # first if the last is already active. # Import local modules from photoshop import Session with Session () as ps : if len ( ps . app . documents ) < 1 : docRef = ps . app . documents . add () else : docRef = ps . app . activeDocument if len ( docRef . layers ) < 2 : docRef . artLayers . add () ps . echo ( docRef . activeLayer . name ) new_layer = docRef . artLayers . add () ps . echo ( new_layer . name ) new_layer . name = \"test\" Add Metadata \"\"\"Add metadata to current active document.\"\"\" # Import built-in modules import os # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document doc . info . author = os . getenv ( \"USERNAME\" ) doc . info . provinceState = \"Beijing\" doc . info . title = \"My Demo\" print ( \"Print all metadata of current active document.\" ) ps . echo ( doc . info ) Add Slate \"\"\"Add slate information dynamically. - Open template. - Update info. - Save as jpg. - Close current document. \"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () slate_template = PSD_FILE [ \"slate_template.psd\" ] with Session ( slate_template , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) print ( f \"Save jpg to { jpg_file } \" ) os . startfile ( jpg_file ) Add Start Application Event \"\"\"Add event for Photoshop start application. In the current example, every time we start photoshop it will alert \"Start Application Event\". Just like you manually in Script> Script Events Manager to enable the event. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : root = mkdtemp () jsx_file = os . path . join ( root , \"event.jsx\" ) with open ( jsx_file , \"w\" ) as f : f . write ( 'alert(\"Start Application event.\")' ) ps . app . notifiers . add ( ps . EventID . Notify , jsx_file ) print ( \"Add event done.\" ) Apply Crystallize Filter Action \"\"\" This script demonstrates how you can use the action manager to execute the Crystallize filter. In order to find all the IDs, see https://helpx.adobe.com/photoshop/kb/downloadable-plugins-and-content.html#ScriptingListenerplugin This blog here explains what a script listener is http://blogs.adobe.com/crawlspace/2006/05/installing_and_1.html References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyCrystallizeFilterAction.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () with Session ( PSD_FILE [ \"layer_comps.psd\" ], \"open\" ) as ps : active_document = ps . active_document nLayerSets = active_document . layerSets print ( f \"The total amount of current layerSet (Group) is \" f \" { len ( nLayerSets ) } .\" ) nArtLayers = active_document . layerSets . item ( len ( nLayerSets )) . artLayers # get the last layer in LayerSets active_document . activeLayer = active_document . layerSets . item ( len ( nLayerSets )) . artLayers . item ( len ( nArtLayers )) def applyCrystallize ( cellSize ): cellSizeID = ps . app . CharIDToTypeID ( \"ClSz\" ) eventCrystallizeID = ps . app . CharIDToTypeID ( \"Crst\" ) filterDescriptor = ps . ActionDescriptor filterDescriptor . putInteger ( cellSizeID , cellSize ) ps . app . executeAction ( eventCrystallizeID , filterDescriptor ) applyCrystallize ( 25 ) print ( \"Apply crystallize done.\" ) Apply Filters \"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyFilters.py \"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules # selections in the open document. import photoshop.api as ps PSD_FILE = psd . get_psd_files () # Start up Photoshop application app = ps . Application () # We don't want any Photoshop dialogs displayed during automated execution app . displayDialogs = ps . DialogModes . DisplayNoDialogs psPixels = 1 start_ruler_units = app . preferences . rulerUnits if start_ruler_units is not psPixels : app . preferences . rulerUnits = psPixels fileName = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( fileName ) nLayerSets = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets ))) - 1 nArtLayers = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets [ nLayerSets ] . artLayers )), ) active_layer = docRef . activeLayer = docRef . layerSets [ nLayerSets ] . artLayers [ nArtLayers ] sel_area = (( 0 , 212 ), ( 300 , 212 ), ( 300 , 300 ), ( 0 , 300 )) docRef . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 20 , True ) print ( f \"Current active layer: { active_layer . name } \" ) active_layer . applyAddNoise ( 15 , ps . NoiseDistribution . GaussianNoise , False ) backColor = ps . SolidColor () backColor . hsb . hue = 0 backColor . hsb . saturation = 0 backColor . hsb . brightness = 100 app . backgroundColor = backColor sel_area2 = (( 120 , 20 ), ( 210 , 20 ), ( 210 , 110 ), ( 120 , 110 )) docRef . selection . select ( sel_area2 , ps . SelectionType . ReplaceSelection , 25 , False ) active_layer . applyDiffuseGlow ( 9 , 12 , 15 ) active_layer . applyGlassEffect ( 7 , 3 , 7 , False , ps . TextureType . TinyLensTexture , None , ) docRef . selection . deselect () # Set ruler units back the way we found it. if start_ruler_units is not psPixels : app . Preferences . RulerUnits = start_ruler_units Change Color Of Background And Foreground \"\"\"Change the color of the background and foreground.\"\"\" # Import local modules from photoshop import Session with Session () as ps : foregroundColor = ps . SolidColor () foregroundColor . rgb . red = 255 foregroundColor . rgb . green = 0 foregroundColor . rgb . blue = 0 ps . app . foregroundColor = foregroundColor backgroundColor = ps . SolidColor () backgroundColor . rgb . red = 0 backgroundColor . rgb . green = 0 backgroundColor . rgb . blue = 0 ps . app . backgroundColor = backgroundColor Color # Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document # Add a solid color. textColor = ps . SolidColor () textColor . rgb . red = 255.0 textColor . rgb . green = 197 textColor . rgb . blue = 255 # Create empty layer. new_text_layer = doc . artLayers . add () # Set empty layer type to text layer new_text_layer . kind = ps . LayerKind . TextLayer # Set current text layer contents to \"Hello, World!\". new_text_layer . textItem . contents = \"Hello, World!\" # Change current text layer position. new_text_layer . textItem . position = [ 160 , 167 ] # Change current text layer text size. new_text_layer . textItem . size = 36 # Change current text layer color. new_text_layer . textItem . color = textColor assert new_text_layer . textItem . color . rgb . red == textColor . rgb . red Compare Colors \"\"\"Check whether the foreground is equal to the background color. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CompareColors.py \"\"\" # Import local modules from photoshop import Session with Session () as ps : if ps . app . foregroundColor . isEqual ( ps . app . backgroundColor ): ps . echo ( \"They're Equal.\" ) else : ps . echo ( \"NOT Equal.\" ) Copy And Paste \"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CopyAndPaste.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () startRulerUnits = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Inches doc = app . documents . add ( 7 , 5 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) # Make sure the active layer is not a text layer, which cannot be copied to the # clipboard. if doc . activeLayer . kind != ps . LayerKind . TextLayer : # Select the left half of the document. Selections are always expressed # in pixels regardless of the current ruler unit type, so we're computing # the selection corner points based on the inch unit width and height # of the document x2 = ( doc . width * doc . resolution ) / 2 y2 = doc . height * doc . resolution sel_area = (( 0 , 0 ), ( x2 , 0 ), ( x2 , y2 ), ( 0 , y2 )) doc . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 0 , False ) doc . selection . copy () # The new doc is created # need to change ruler units to pixels because x2 and y2 are pixel units. app . preferences . rulerUnits = ps . Units . Pixels pasteDoc = app . documents . add ( x2 , y2 , doc . resolution , \"Paste Target\" ) pasteDoc . paste () else : print ( \"You cannot copy from a text layer\" ) if startRulerUnits != app . preferences . rulerUnits : app . preferences . rulerUnits = startRulerUnits Create New Document \"\"\"Create a new document.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . preferences . rulerUnits = ps . Units . Pixels ps . app . documents . add ( 1920 , 1080 , name = \"my_new_document\" ) Create Thumbnail \"\"\"Create a thumbnail image for currently active document. You can use the thumbnail image to upload to Shotgun or Ftrack. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session def create_thumbnail ( output_path = None , max_resolution = 512 ): \"\"\"Create a thumbnail image for currently active document. Args: output_path (str): The absolute output path of the thumbnail image. The default is to output to a temporary folder. max_resolution (int): The max resolution of the thumbnail. The default is `512`. Returns: str: The absolute output path of the thumbnail image. \"\"\" output_path = output_path or os . path . join ( mkdtemp (), \"thumb.jpg\" ) with Session ( auto_close = True ) as ps : orig_name = ps . active_document . name width_str = ps . active_document . width height_str = ps . active_document . height thumb_name = f \" { orig_name } _thumb\" max_resolution = width_str / max_resolution thumb_width = int ( width_str / max_resolution ) thumb_height = int ( height_str / max_resolution ) thumb_doc = ps . active_document . duplicate ( thumb_name ) thumb_doc . resizeImage ( thumb_width , thumb_height - 100 ) thumb_doc . saveAs ( output_path , ps . JPEGSaveOptions (), asCopy = True ) thumb_doc . close () return output_path if __name__ == \"__main__\" : thumb_file = create_thumbnail () print ( f \"Save thumbnail file to { thumb_file } .\" ) Creating A Layer \"\"\" Let's get the current document and create a new layer \"Background\" and fill it with red color. In order to use the Fill tool we will first select the entire layer and then fill it with a color. \"\"\" # Import local modules from photoshop import Session with Session () as ps : document = ps . active_document # Create color object of color red. fillColor = ps . SolidColor () fillColor . rgb . red = 222 fillColor . rgb . green = 0 fillColor . rgb . blue = 0 # Add a new layer called Background. layer = document . artLayers . add () layer . name = \"Background\" # Select the entire layer. document . selection . selectAll () # Fill the selection with color. document . selection . fill ( fillColor ) # Deselect. document . selection . deselect () Cropping \"\"\"A cropping example.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . active_document . crop ( bounds = [ 100 , 12 , 354 , 246 ], width = 1920 , height = 1080 ) Current Tool # Import local modules from photoshop import Session with Session () as ps : # Print the current tool. ps . echo ( ps . app . currentTool ) # Set current tool to `typeCreateOrEditTool`. ps . app . currentTool = \"typeCreateOrEditTool\" Do Photoshop Action \"\"\"Do a photoshop action.\"\"\" # Import local modules from photoshop import Session with Session () as api : api . app . doAction ( action = \"Frame Channel - 50 pixel\" ) Emboss Action # Import local modules from photoshop import Session with Session () as ps : app = ps . app for index , x in enumerate ( range ( 50 )): # Execute an existing action from action palette. idPly = app . charIDToTypeID ( \"Ply \" ) desc8 = ps . ActionDescriptor () idnull = app . charIDToTypeID ( \"null\" ) ref3 = ps . ActionReference () idActn = app . charIDToTypeID ( \"Actn\" ) ref3 . putName ( idActn , \"Sepia Toning (layer)\" ) idASet = app . charIDToTypeID ( \"ASet\" ) ref3 . PutName ( idASet , \"Default Actions\" ) desc8 . putReference ( idnull , ref3 ) app . executeAction ( idPly , desc8 , ps . DialogModes . DisplayNoDialogs ) # Create solid color fill layer. idMk = app . charIDToTypeID ( \"Mk \" ) desc21 = ps . ActionDescriptor () idNull = app . charIDToTypeID ( \"null\" ) ref12 = ps . ActionReference () idContentLayer1 = app . stringIDToTypeID ( \"contentLayer\" ) ref12 . putClass ( idContentLayer1 ) desc21 . putReference ( idNull , ref12 ) idUsng = app . charIDToTypeID ( \"Usng\" ) desc22 = ps . ActionDescriptor () idType = app . charIDToTypeID ( \"Type\" ) desc23 = ps . ActionDescriptor () idClr = app . charIDToTypeID ( \"Clr \" ) desc24 = ps . ActionDescriptor () idRd = app . charIDToTypeID ( \"Rd \" ) desc24 . putDouble ( idRd , index ) idGrn = app . charIDToTypeID ( \"Grn \" ) desc24 . putDouble ( idGrn , index ) idBl = app . charIDToTypeID ( \"Bl \" ) desc24 . putDouble ( idBl , index ) idRGBC = app . charIDToTypeID ( \"RGBC\" ) desc23 . putObject ( idClr , idRGBC , desc24 ) idSolidColorLayer = app . StringIDToTypeID ( \"solidColorLayer\" ) desc22 . putObject ( idType , idSolidColorLayer , desc23 ) idContentLayer2 = app . StringIDToTypeID ( \"contentLayer\" ) desc21 . putObject ( idUsng , idContentLayer2 , desc22 ) app . executeAction ( idMk , desc21 , ps . DialogModes . DisplayNoDialogs ) # Select mask. idSlct = app . charIDToTypeID ( \"slct\" ) desc38 = ps . ActionDescriptor () idNull1 = app . charIDToTypeID ( \"null\" ) ref20 = ps . ActionReference () idChnl1 = app . charIDToTypeID ( \"Chnl\" ) idChnl2 = app . charIDToTypeID ( \"Chnl\" ) idMsk = app . charIDToTypeID ( \"Msk \" ) ref20 . putEnumerated ( idChnl1 , idChnl2 , idMsk ) desc38 . putReference ( idNull1 , ref20 ) idMkVs = app . charIDToTypeID ( \"MkVs\" ) desc38 . putBoolean ( idMkVs , False ) app . executeAction ( idSlct , desc38 , ps . DialogModes . DisplayNoDialogs ) app . activeDocument . activeLayer . invert () Enable Generator \"\"\"Enable Generator features.\"\"\" # Import local modules from photoshop import Session with Session () as ps : plugin_name = \"generator-assets-dummy-menu\" generatorDesc = ps . ActionDescriptor generatorDesc . putString ( ps . app . stringIDToTypeID ( \"name\" ), plugin_name ) ps . app . executeAction ( ps . app . stringIDToTypeID ( \"generateAssets\" ), generatorDesc ) Eval Javascript # Import local modules import photoshop.api as ps app = ps . Application () jsx = r \"\"\" var doc = app.activeDocument; var orig_name = doc.name; alert(orig_name); \"\"\" app . doJavaScript ( jsx ) # Print name of current active document. print ( app . doJavaScript ( \"app.activeDocument.name\" )) Export Layers As Png \"\"\"Export every layer as a .png file.\"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () def hide_all_layers ( layers ): for layer in layers : layer . visible = False def main (): psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" ) as ps : doc = ps . active_document options = ps . PNGSaveOptions () layers = doc . artLayers for layer in layers : hide_all_layers ( layers ) layer . visible = True layer_path = os . path . join ( doc . path , layer . name ) print ( layer_path ) if not os . path . exists ( layer_path ): os . makedirs ( layer_path ) image_path = os . path . join ( layer_path , f \" { layer . name } .png\" ) doc . saveAs ( image_path , options , True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) if __name__ == \"__main__\" : main () Fill Selection # Fill the current selection with an RGB color. # Import local modules from photoshop import Session with Session () as ps : start_ruler_units = ps . app . Preferences . RulerUnits if len ( ps . app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels docRef = ps . app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) docRef . artLayers . add () ps . app . preferences . rulerUnits = start_ruler_units if not ps . active_document . activeLayer . isBackgroundLayer : selRef = ps . active_document . selection fillcolor = ps . SolidColor () fillcolor . rgb . red = 225 fillcolor . rgb . green = 0 fillcolor . rgb . blue = 0 selRef . fill ( fillcolor , ps . ColorBlendMode . NormalBlendColor , 25 , False ) else : ps . echo ( \"Can't perform operation on background layer.\" ) Fit On Screen \"\"\"Let the current document Fit on screen.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . charIDToTypeID ( \"FtOn\" )) Hello World # Import built-in modules import os from tempfile import mkdtemp # Import local modules import photoshop.api as ps def hello_world (): app = ps . Application () doc = app . documents . add () text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) os . startfile ( jpg_file ) if __name__ == \"__main__\" : hello_world () Import Image As Layer \"\"\"Import a image as a artLayer.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : desc = ps . ActionDescriptor desc . putPath ( ps . app . charIDToTypeID ( \"null\" ), \"your/image/path\" ) event_id = ps . app . charIDToTypeID ( \"Plc \" ) # `Plc` need one space in here. ps . app . executeAction ( ps . app . charIDToTypeID ( \"Plc \" ), desc ) Link Layer # Import local modules import photoshop.api as ps app = ps . Application () start_ruler_units = app . preferences . rulerUnits if len ( app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : app . preferences . rulerUnits = ps . Units . Pixels docRef = app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . BackgroundColor , ) else : docRef = app . activeDocument layerRef = docRef . artLayers . add () layerRef2 = docRef . artLayers . add () layerRef . link ( layerRef2 ) # Set the ruler back to where it was app . preferences . rulerUnits = start_ruler_units List Documents \"\"\"List current photoshop all documents.\"\"\" # Import local modules import photoshop.api as ps app = ps . Application () # doc = app.documents[0] # print(doc.name) for doc in app . documents : # for layer in doc.layers: for l in doc . layers : l . duplicate () # print(layer.name, doc.name) Load Selection # This script will demonstrate how to load a selection from a saved alpha # channel. # Import local modules from photoshop import Session with Session () as ps : doc_ref = ps . app . documents . add ( 320 , 240 ) start_ruler_units = ps . app . preferences . rulerUnits if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels # Save a rectangular selection area offset by 50 pixels from the image # border into an alpha channel. offset = 50 selBounds1 = ( ( offset , offset ), ( doc_ref . Width - offset , offset ), ( doc_ref . Width - offset , doc_ref . Height - offset ), ( offset , doc_ref . Height - offset ), ) doc_ref . selection . select ( selBounds1 ) selAlpha = doc_ref . channels . Add () doc_ref . selection . store ( selAlpha ) # Now create a second wider but less tall selection. selBounds2 = (( 0 , 75 ), ( doc_ref . Width , 75 ), ( doc_ref . Width , 150 ), ( 0 , 150 )) doc_ref . selection . select ( selBounds2 ) # Load the selection from the just saved alpha channel, combining it with # the active selection. doc_ref . selection . load ( selAlpha , ps . SelectionType . ExtendSelection , False ) # Set ruler back to where it was. ps . app . Preferences . RulerUnits = start_ruler_units Move To End # Import local modules import photoshop.api as ps # Get photoshop instance. app = ps . Application () # Add new document and set name to \"Example for move to End.\" active_document = app . documents . add ( name = \"Example for move to End.\" ) # Add a new layer set. group_layer = active_document . layerSets . add () # Add a layer in the group. layer = group_layer . artLayers . add () layer . name = \"This is a child layer.\" # Add a new layer in this active document top. top_layer = active_document . artLayers . add () top_layer . name = \"This is a top layer.\" top_layer . moveToEnd ( group_layer ) New Document # Create a new Photoshop document with diminsions 4 inches by 4 inches. # Import local modules import photoshop.api as ps # Start up Photoshop application app = ps . Application () start_ruler_units = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Pixels # Create the document docRef = app . documents . add ( 1920 , 1080 , 72.0 , \"My New Document\" ) # Make sure to set the ruler units prior to creating the document. app . preferences . rulerUnits = start_ruler_units Open Psd # Import local modules from photoshop import Session import photoshop.api as ps # style 1 app = ps . Application () app . load ( \"your/psd/or/psb/file_path.psd\" ) # style 2 with Session ( \"your/psd/or/psb/file_path.psd\" , action = \"open\" ) as ps : ps . echo ( ps . active_document . name ) Operation Channels \"\"\"A examples to show you how to operation active document channels.\"\"\" # Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document print ( len ( doc . channels )) doc . channels . add () doc . channels . removeAll () channel = doc . channels . getByName ( \"Red\" ) print ( channel . name ) channel . remove () Operation Layer Set \"\"\"A examples to show you how to operation layerSet.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : docRef = ps . active_document # Add a new layerSet. new_layer_set = docRef . layerSets . add () # Print the layerSet count. ps . echo ( docRef . layerSets . length ) ps . echo ( len ( docRef . layerSets )) # Rename the layerSet. docRef . layerSets [ 0 ] . name = \"New Name\" ps . echo ( new_layer_set . name ) # Change the layerSet opacity new_layer_set . opacity = 90 ps . echo ( new_layer_set . opacity ) # Duplicate the layerSet. duplicate_layer_set = new_layer_set . duplicate () # Add a new artLayer in current active document. layer = docRef . artLayers . add () # Move the artLayer under the duplicate layerSet. layer . move ( duplicate_layer_set , ps . ElementPlacement . PlaceInside ) # Merge the layerSet. merged_layer = duplicate_layer_set . merge () ps . echo ( merged_layer . name ) # Set visible. new_layer_set . visible = False merged_layer . remove () Photoshop Session \"\"\"Add slate information dynamically.\"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"slate_template.psd\" ] with Session ( file_path , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) os . startfile ( jpg_file ) Replace Images \"\"\"Replace the image of the current active layer with a new image.\"\"\" # Import local modules from photoshop import Session with Session () as ps : replace_contents = ps . app . stringIDToTypeID ( \"placedLayerReplaceContents\" ) desc = ps . ActionDescriptor idnull = ps . app . charIDToTypeID ( \"null\" ) desc . putPath ( idnull , \"your/image/path.jpg\" ) ps . app . executeAction ( replace_contents , desc ) Rotate Layer \"\"\"This scripts demonstrates how to rotate a layer 45 degrees clockwise. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/RotateLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( app . documents ) > 0 : print ( app . activeDocument . activeLayer . typename ) if not app . activeDocument . activeLayer . isBackgroundLayer : docRef = app . activeDocument layerRef = docRef . layers [ 0 ] layerRef . rotate ( 45.0 ) else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"You must have at least one open document to run this script!\" ) Save As Pdf \"\"\"Save current active document as a PDF file.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : option = ps . PDFSaveOptions ( jpegQuality = 12 , layers = True , view = True ) pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option ) with Session () as ps : option = ps . PDFSaveOptions () option . jpegQuality = 12 option . layers = True option . view = True # opens the saved PDF in Acrobat. pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option ) Save As Tga # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 text_color . rgb . red = 0 text_color . rgb . blue = 0 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color tga_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"test.tga\" ) doc . saveAs ( tga_file , ps . TargaSaveOptions (), asCopy = True ) os . startfile ( tga_file ) Save To Psd \"\"\"Save your current active document as a .psd file.\"\"\" # Import local modules from photoshop import Session with Session () as ps : psd_file = \"your/psd/save/file/path.psd\" doc = ps . active_document options = ps . PhotoshopSaveOptions () layers = doc . artLayers doc . saveAs ( psd_file , options , True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) Selection Stroke \"\"\"Create a stroke around the current selection, Set the stroke color and width of the new stroke. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SelectionStroke.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( list (( i , x ) for i , x in enumerate ( app . documents , 1 ))) > 0 : if not app . activeDocument . activeLayer . isBackgroundLayer : psPixels = 1 start_ruler_units = app . Preferences . RulerUnits app . preferences . rulerUnits = ps . Units . Pixels selRef = app . activeDocument . selection offset = 10 selBounds = ( ( offset , offset ), ( app . activeDocument . width - offset , offset ), ( app . activeDocument . width - offset , app . activeDocument . height - offset ), ( offset , app . activeDocument . height - offset ), ) selRef . select ( selBounds ) selRef . selectBorder ( 5 ) # create text color properties strokeColor = ps . SolidColor () strokeColor . cmyk . cyan = 58 strokeColor . cmyk . magenta = 0 strokeColor . cmyk . yellow = 70 strokeColor . cmyk . black = 0 app . displayDialogs = ps . DialogModes . DisplayNoDialogs selRef . stroke ( strokeColor , 2 , ps . StrokeLocation . OutsideStroke , ps . ColorBlendMode . ColorBlendMode , 75 , True , ) # Set ruler units back the way we found it. app . preferences . rulerUnits = start_ruler_units else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"Create a document with an active selection before running this \" \"script!\" ) Session Callback # Import local modules from photoshop import Session def do_something ( photoshop_api ): print ( photoshop_api . active_document ) print ( \"Do something.\" ) with Session ( callback = do_something ) as ps : ps . echo ( ps . active_document . name ) ps . alert ( ps . active_document . name ) Session Document Duplicate \"\"\"Action for duplicate current active document.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"document_duplicate\" ) as ps : ps . echo ( ps . active_document . name ) Session Hello World \"\"\"Add slate information dynamically.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as adobe : doc = adobe . app . documents . add ( 2000 , 2000 ) text_color = adobe . SolidColor () text_color . rgb . red = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = adobe . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = adobe . JPEGSaveOptions ( quality = 1 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) adobe . app . doJavaScript ( f 'alert(\"save to jpg: { jpg_file } \")' ) Session New Document \"\"\"Action for create new document and print new document name.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . echo ( ps . active_document . name ) Session Smart Sharpen \"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] with Session ( file_path , action = \"open\" ) as ps : def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = ps . app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = ps . app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = ps . app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = ps . app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = ps . app . charIDToTypeID ( \"Amnt\" ) idPrc = ps . app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = ps . app . charIDToTypeID ( \"Rds \" ) idPxl = ps . app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = ps . app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = ps . app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = ps . app . charIDToTypeID ( \"blur\" ) idblurType = ps . app . stringIDToTypeID ( \"blurType\" ) idGsnB = ps . app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) ps . app . ExecuteAction ( idsmart_sharpen_id , desc37 ) docRef = ps . active_document nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) SmartSharpen ( 300 , 2.0 , 20 ) Set Active Layer \"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ActiveLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if app . documents . length < 1 : docRef = app . documents . add () else : docRef = app . activeDocument if docRef . layers . length < 2 : docRef . artLayers . add () activeLayerName = docRef . activeLayer . name if docRef . activeLayer . name != docRef . layers . item ( docRef . layers . length ) . name : docRef . activeLayer = docRef . layers . item ( docRef . layers . length ) else : docRef . activeLayer = docRef . layers . item ( 1 ) Smart Sharpen \"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules import photoshop.api as ps app = ps . Application () PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( file_path ) nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = app . charIDToTypeID ( \"Amnt\" ) idPrc = app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = app . charIDToTypeID ( \"Rds \" ) idPxl = app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = app . charIDToTypeID ( \"blur\" ) idblurType = app . stringIDToTypeID ( \"blurType\" ) idGsnB = app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) app . ExecuteAction ( idsmart_sharpen_id , desc37 ) SmartSharpen ( 300 , 2.0 , 20 ) Toggle Proof Colors \"\"\"Toggle the proof color. Like operating in the menu: **View** > **Proof Colors** (Ctrl + Y) \"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . stringIDToTypeID ( \"toggleProofColors\" )) Trim \"\"\"A trim example.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () example_file = PSD_FILE [ \"trim.psd\" ] with Session ( example_file , action = \"open\" ) as ps : ps . active_document . trim ( ps . TrimType . TopLeftPixel , True , True , True , True )","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#active-layer","text":"# Set the active layer to the last art layer of the active document, or the # first if the last is already active. # Import local modules from photoshop import Session with Session () as ps : if len ( ps . app . documents ) < 1 : docRef = ps . app . documents . add () else : docRef = ps . app . activeDocument if len ( docRef . layers ) < 2 : docRef . artLayers . add () ps . echo ( docRef . activeLayer . name ) new_layer = docRef . artLayers . add () ps . echo ( new_layer . name ) new_layer . name = \"test\"","title":"Active Layer"},{"location":"examples/#add-metadata","text":"\"\"\"Add metadata to current active document.\"\"\" # Import built-in modules import os # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document doc . info . author = os . getenv ( \"USERNAME\" ) doc . info . provinceState = \"Beijing\" doc . info . title = \"My Demo\" print ( \"Print all metadata of current active document.\" ) ps . echo ( doc . info )","title":"Add Metadata"},{"location":"examples/#add-slate","text":"\"\"\"Add slate information dynamically. - Open template. - Update info. - Save as jpg. - Close current document. \"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () slate_template = PSD_FILE [ \"slate_template.psd\" ] with Session ( slate_template , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) print ( f \"Save jpg to { jpg_file } \" ) os . startfile ( jpg_file )","title":"Add Slate"},{"location":"examples/#add-start-application-event","text":"\"\"\"Add event for Photoshop start application. In the current example, every time we start photoshop it will alert \"Start Application Event\". Just like you manually in Script> Script Events Manager to enable the event. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : root = mkdtemp () jsx_file = os . path . join ( root , \"event.jsx\" ) with open ( jsx_file , \"w\" ) as f : f . write ( 'alert(\"Start Application event.\")' ) ps . app . notifiers . add ( ps . EventID . Notify , jsx_file ) print ( \"Add event done.\" )","title":"Add Start Application Event"},{"location":"examples/#apply-crystallize-filter-action","text":"\"\"\" This script demonstrates how you can use the action manager to execute the Crystallize filter. In order to find all the IDs, see https://helpx.adobe.com/photoshop/kb/downloadable-plugins-and-content.html#ScriptingListenerplugin This blog here explains what a script listener is http://blogs.adobe.com/crawlspace/2006/05/installing_and_1.html References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyCrystallizeFilterAction.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () with Session ( PSD_FILE [ \"layer_comps.psd\" ], \"open\" ) as ps : active_document = ps . active_document nLayerSets = active_document . layerSets print ( f \"The total amount of current layerSet (Group) is \" f \" { len ( nLayerSets ) } .\" ) nArtLayers = active_document . layerSets . item ( len ( nLayerSets )) . artLayers # get the last layer in LayerSets active_document . activeLayer = active_document . layerSets . item ( len ( nLayerSets )) . artLayers . item ( len ( nArtLayers )) def applyCrystallize ( cellSize ): cellSizeID = ps . app . CharIDToTypeID ( \"ClSz\" ) eventCrystallizeID = ps . app . CharIDToTypeID ( \"Crst\" ) filterDescriptor = ps . ActionDescriptor filterDescriptor . putInteger ( cellSizeID , cellSize ) ps . app . executeAction ( eventCrystallizeID , filterDescriptor ) applyCrystallize ( 25 ) print ( \"Apply crystallize done.\" )","title":"Apply Crystallize Filter Action"},{"location":"examples/#apply-filters","text":"\"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyFilters.py \"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules # selections in the open document. import photoshop.api as ps PSD_FILE = psd . get_psd_files () # Start up Photoshop application app = ps . Application () # We don't want any Photoshop dialogs displayed during automated execution app . displayDialogs = ps . DialogModes . DisplayNoDialogs psPixels = 1 start_ruler_units = app . preferences . rulerUnits if start_ruler_units is not psPixels : app . preferences . rulerUnits = psPixels fileName = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( fileName ) nLayerSets = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets ))) - 1 nArtLayers = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets [ nLayerSets ] . artLayers )), ) active_layer = docRef . activeLayer = docRef . layerSets [ nLayerSets ] . artLayers [ nArtLayers ] sel_area = (( 0 , 212 ), ( 300 , 212 ), ( 300 , 300 ), ( 0 , 300 )) docRef . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 20 , True ) print ( f \"Current active layer: { active_layer . name } \" ) active_layer . applyAddNoise ( 15 , ps . NoiseDistribution . GaussianNoise , False ) backColor = ps . SolidColor () backColor . hsb . hue = 0 backColor . hsb . saturation = 0 backColor . hsb . brightness = 100 app . backgroundColor = backColor sel_area2 = (( 120 , 20 ), ( 210 , 20 ), ( 210 , 110 ), ( 120 , 110 )) docRef . selection . select ( sel_area2 , ps . SelectionType . ReplaceSelection , 25 , False ) active_layer . applyDiffuseGlow ( 9 , 12 , 15 ) active_layer . applyGlassEffect ( 7 , 3 , 7 , False , ps . TextureType . TinyLensTexture , None , ) docRef . selection . deselect () # Set ruler units back the way we found it. if start_ruler_units is not psPixels : app . Preferences . RulerUnits = start_ruler_units","title":"Apply Filters"},{"location":"examples/#change-color-of-background-and-foreground","text":"\"\"\"Change the color of the background and foreground.\"\"\" # Import local modules from photoshop import Session with Session () as ps : foregroundColor = ps . SolidColor () foregroundColor . rgb . red = 255 foregroundColor . rgb . green = 0 foregroundColor . rgb . blue = 0 ps . app . foregroundColor = foregroundColor backgroundColor = ps . SolidColor () backgroundColor . rgb . red = 0 backgroundColor . rgb . green = 0 backgroundColor . rgb . blue = 0 ps . app . backgroundColor = backgroundColor","title":"Change Color Of Background And Foreground"},{"location":"examples/#color","text":"# Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document # Add a solid color. textColor = ps . SolidColor () textColor . rgb . red = 255.0 textColor . rgb . green = 197 textColor . rgb . blue = 255 # Create empty layer. new_text_layer = doc . artLayers . add () # Set empty layer type to text layer new_text_layer . kind = ps . LayerKind . TextLayer # Set current text layer contents to \"Hello, World!\". new_text_layer . textItem . contents = \"Hello, World!\" # Change current text layer position. new_text_layer . textItem . position = [ 160 , 167 ] # Change current text layer text size. new_text_layer . textItem . size = 36 # Change current text layer color. new_text_layer . textItem . color = textColor assert new_text_layer . textItem . color . rgb . red == textColor . rgb . red","title":"Color"},{"location":"examples/#compare-colors","text":"\"\"\"Check whether the foreground is equal to the background color. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CompareColors.py \"\"\" # Import local modules from photoshop import Session with Session () as ps : if ps . app . foregroundColor . isEqual ( ps . app . backgroundColor ): ps . echo ( \"They're Equal.\" ) else : ps . echo ( \"NOT Equal.\" )","title":"Compare Colors"},{"location":"examples/#copy-and-paste","text":"\"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CopyAndPaste.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () startRulerUnits = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Inches doc = app . documents . add ( 7 , 5 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) # Make sure the active layer is not a text layer, which cannot be copied to the # clipboard. if doc . activeLayer . kind != ps . LayerKind . TextLayer : # Select the left half of the document. Selections are always expressed # in pixels regardless of the current ruler unit type, so we're computing # the selection corner points based on the inch unit width and height # of the document x2 = ( doc . width * doc . resolution ) / 2 y2 = doc . height * doc . resolution sel_area = (( 0 , 0 ), ( x2 , 0 ), ( x2 , y2 ), ( 0 , y2 )) doc . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 0 , False ) doc . selection . copy () # The new doc is created # need to change ruler units to pixels because x2 and y2 are pixel units. app . preferences . rulerUnits = ps . Units . Pixels pasteDoc = app . documents . add ( x2 , y2 , doc . resolution , \"Paste Target\" ) pasteDoc . paste () else : print ( \"You cannot copy from a text layer\" ) if startRulerUnits != app . preferences . rulerUnits : app . preferences . rulerUnits = startRulerUnits","title":"Copy And Paste"},{"location":"examples/#create-new-document","text":"\"\"\"Create a new document.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . preferences . rulerUnits = ps . Units . Pixels ps . app . documents . add ( 1920 , 1080 , name = \"my_new_document\" )","title":"Create New Document"},{"location":"examples/#create-thumbnail","text":"\"\"\"Create a thumbnail image for currently active document. You can use the thumbnail image to upload to Shotgun or Ftrack. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session def create_thumbnail ( output_path = None , max_resolution = 512 ): \"\"\"Create a thumbnail image for currently active document. Args: output_path (str): The absolute output path of the thumbnail image. The default is to output to a temporary folder. max_resolution (int): The max resolution of the thumbnail. The default is `512`. Returns: str: The absolute output path of the thumbnail image. \"\"\" output_path = output_path or os . path . join ( mkdtemp (), \"thumb.jpg\" ) with Session ( auto_close = True ) as ps : orig_name = ps . active_document . name width_str = ps . active_document . width height_str = ps . active_document . height thumb_name = f \" { orig_name } _thumb\" max_resolution = width_str / max_resolution thumb_width = int ( width_str / max_resolution ) thumb_height = int ( height_str / max_resolution ) thumb_doc = ps . active_document . duplicate ( thumb_name ) thumb_doc . resizeImage ( thumb_width , thumb_height - 100 ) thumb_doc . saveAs ( output_path , ps . JPEGSaveOptions (), asCopy = True ) thumb_doc . close () return output_path if __name__ == \"__main__\" : thumb_file = create_thumbnail () print ( f \"Save thumbnail file to { thumb_file } .\" )","title":"Create Thumbnail"},{"location":"examples/#creating-a-layer","text":"\"\"\" Let's get the current document and create a new layer \"Background\" and fill it with red color. In order to use the Fill tool we will first select the entire layer and then fill it with a color. \"\"\" # Import local modules from photoshop import Session with Session () as ps : document = ps . active_document # Create color object of color red. fillColor = ps . SolidColor () fillColor . rgb . red = 222 fillColor . rgb . green = 0 fillColor . rgb . blue = 0 # Add a new layer called Background. layer = document . artLayers . add () layer . name = \"Background\" # Select the entire layer. document . selection . selectAll () # Fill the selection with color. document . selection . fill ( fillColor ) # Deselect. document . selection . deselect ()","title":"Creating A Layer"},{"location":"examples/#cropping","text":"\"\"\"A cropping example.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . active_document . crop ( bounds = [ 100 , 12 , 354 , 246 ], width = 1920 , height = 1080 )","title":"Cropping"},{"location":"examples/#current-tool","text":"# Import local modules from photoshop import Session with Session () as ps : # Print the current tool. ps . echo ( ps . app . currentTool ) # Set current tool to `typeCreateOrEditTool`. ps . app . currentTool = \"typeCreateOrEditTool\"","title":"Current Tool"},{"location":"examples/#do-photoshop-action","text":"\"\"\"Do a photoshop action.\"\"\" # Import local modules from photoshop import Session with Session () as api : api . app . doAction ( action = \"Frame Channel - 50 pixel\" )","title":"Do Photoshop Action"},{"location":"examples/#emboss-action","text":"# Import local modules from photoshop import Session with Session () as ps : app = ps . app for index , x in enumerate ( range ( 50 )): # Execute an existing action from action palette. idPly = app . charIDToTypeID ( \"Ply \" ) desc8 = ps . ActionDescriptor () idnull = app . charIDToTypeID ( \"null\" ) ref3 = ps . ActionReference () idActn = app . charIDToTypeID ( \"Actn\" ) ref3 . putName ( idActn , \"Sepia Toning (layer)\" ) idASet = app . charIDToTypeID ( \"ASet\" ) ref3 . PutName ( idASet , \"Default Actions\" ) desc8 . putReference ( idnull , ref3 ) app . executeAction ( idPly , desc8 , ps . DialogModes . DisplayNoDialogs ) # Create solid color fill layer. idMk = app . charIDToTypeID ( \"Mk \" ) desc21 = ps . ActionDescriptor () idNull = app . charIDToTypeID ( \"null\" ) ref12 = ps . ActionReference () idContentLayer1 = app . stringIDToTypeID ( \"contentLayer\" ) ref12 . putClass ( idContentLayer1 ) desc21 . putReference ( idNull , ref12 ) idUsng = app . charIDToTypeID ( \"Usng\" ) desc22 = ps . ActionDescriptor () idType = app . charIDToTypeID ( \"Type\" ) desc23 = ps . ActionDescriptor () idClr = app . charIDToTypeID ( \"Clr \" ) desc24 = ps . ActionDescriptor () idRd = app . charIDToTypeID ( \"Rd \" ) desc24 . putDouble ( idRd , index ) idGrn = app . charIDToTypeID ( \"Grn \" ) desc24 . putDouble ( idGrn , index ) idBl = app . charIDToTypeID ( \"Bl \" ) desc24 . putDouble ( idBl , index ) idRGBC = app . charIDToTypeID ( \"RGBC\" ) desc23 . putObject ( idClr , idRGBC , desc24 ) idSolidColorLayer = app . StringIDToTypeID ( \"solidColorLayer\" ) desc22 . putObject ( idType , idSolidColorLayer , desc23 ) idContentLayer2 = app . StringIDToTypeID ( \"contentLayer\" ) desc21 . putObject ( idUsng , idContentLayer2 , desc22 ) app . executeAction ( idMk , desc21 , ps . DialogModes . DisplayNoDialogs ) # Select mask. idSlct = app . charIDToTypeID ( \"slct\" ) desc38 = ps . ActionDescriptor () idNull1 = app . charIDToTypeID ( \"null\" ) ref20 = ps . ActionReference () idChnl1 = app . charIDToTypeID ( \"Chnl\" ) idChnl2 = app . charIDToTypeID ( \"Chnl\" ) idMsk = app . charIDToTypeID ( \"Msk \" ) ref20 . putEnumerated ( idChnl1 , idChnl2 , idMsk ) desc38 . putReference ( idNull1 , ref20 ) idMkVs = app . charIDToTypeID ( \"MkVs\" ) desc38 . putBoolean ( idMkVs , False ) app . executeAction ( idSlct , desc38 , ps . DialogModes . DisplayNoDialogs ) app . activeDocument . activeLayer . invert ()","title":"Emboss Action"},{"location":"examples/#enable-generator","text":"\"\"\"Enable Generator features.\"\"\" # Import local modules from photoshop import Session with Session () as ps : plugin_name = \"generator-assets-dummy-menu\" generatorDesc = ps . ActionDescriptor generatorDesc . putString ( ps . app . stringIDToTypeID ( \"name\" ), plugin_name ) ps . app . executeAction ( ps . app . stringIDToTypeID ( \"generateAssets\" ), generatorDesc )","title":"Enable Generator"},{"location":"examples/#eval-javascript","text":"# Import local modules import photoshop.api as ps app = ps . Application () jsx = r \"\"\" var doc = app.activeDocument; var orig_name = doc.name; alert(orig_name); \"\"\" app . doJavaScript ( jsx ) # Print name of current active document. print ( app . doJavaScript ( \"app.activeDocument.name\" ))","title":"Eval Javascript"},{"location":"examples/#export-layers-as-png","text":"\"\"\"Export every layer as a .png file.\"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () def hide_all_layers ( layers ): for layer in layers : layer . visible = False def main (): psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" ) as ps : doc = ps . active_document options = ps . PNGSaveOptions () layers = doc . artLayers for layer in layers : hide_all_layers ( layers ) layer . visible = True layer_path = os . path . join ( doc . path , layer . name ) print ( layer_path ) if not os . path . exists ( layer_path ): os . makedirs ( layer_path ) image_path = os . path . join ( layer_path , f \" { layer . name } .png\" ) doc . saveAs ( image_path , options , True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) if __name__ == \"__main__\" : main ()","title":"Export Layers As Png"},{"location":"examples/#fill-selection","text":"# Fill the current selection with an RGB color. # Import local modules from photoshop import Session with Session () as ps : start_ruler_units = ps . app . Preferences . RulerUnits if len ( ps . app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels docRef = ps . app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) docRef . artLayers . add () ps . app . preferences . rulerUnits = start_ruler_units if not ps . active_document . activeLayer . isBackgroundLayer : selRef = ps . active_document . selection fillcolor = ps . SolidColor () fillcolor . rgb . red = 225 fillcolor . rgb . green = 0 fillcolor . rgb . blue = 0 selRef . fill ( fillcolor , ps . ColorBlendMode . NormalBlendColor , 25 , False ) else : ps . echo ( \"Can't perform operation on background layer.\" )","title":"Fill Selection"},{"location":"examples/#fit-on-screen","text":"\"\"\"Let the current document Fit on screen.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . charIDToTypeID ( \"FtOn\" ))","title":"Fit On Screen"},{"location":"examples/#hello-world","text":"# Import built-in modules import os from tempfile import mkdtemp # Import local modules import photoshop.api as ps def hello_world (): app = ps . Application () doc = app . documents . add () text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) os . startfile ( jpg_file ) if __name__ == \"__main__\" : hello_world ()","title":"Hello World"},{"location":"examples/#import-image-as-layer","text":"\"\"\"Import a image as a artLayer.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : desc = ps . ActionDescriptor desc . putPath ( ps . app . charIDToTypeID ( \"null\" ), \"your/image/path\" ) event_id = ps . app . charIDToTypeID ( \"Plc \" ) # `Plc` need one space in here. ps . app . executeAction ( ps . app . charIDToTypeID ( \"Plc \" ), desc )","title":"Import Image As Layer"},{"location":"examples/#link-layer","text":"# Import local modules import photoshop.api as ps app = ps . Application () start_ruler_units = app . preferences . rulerUnits if len ( app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : app . preferences . rulerUnits = ps . Units . Pixels docRef = app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . BackgroundColor , ) else : docRef = app . activeDocument layerRef = docRef . artLayers . add () layerRef2 = docRef . artLayers . add () layerRef . link ( layerRef2 ) # Set the ruler back to where it was app . preferences . rulerUnits = start_ruler_units","title":"Link Layer"},{"location":"examples/#list-documents","text":"\"\"\"List current photoshop all documents.\"\"\" # Import local modules import photoshop.api as ps app = ps . Application () # doc = app.documents[0] # print(doc.name) for doc in app . documents : # for layer in doc.layers: for l in doc . layers : l . duplicate () # print(layer.name, doc.name)","title":"List Documents"},{"location":"examples/#load-selection","text":"# This script will demonstrate how to load a selection from a saved alpha # channel. # Import local modules from photoshop import Session with Session () as ps : doc_ref = ps . app . documents . add ( 320 , 240 ) start_ruler_units = ps . app . preferences . rulerUnits if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels # Save a rectangular selection area offset by 50 pixels from the image # border into an alpha channel. offset = 50 selBounds1 = ( ( offset , offset ), ( doc_ref . Width - offset , offset ), ( doc_ref . Width - offset , doc_ref . Height - offset ), ( offset , doc_ref . Height - offset ), ) doc_ref . selection . select ( selBounds1 ) selAlpha = doc_ref . channels . Add () doc_ref . selection . store ( selAlpha ) # Now create a second wider but less tall selection. selBounds2 = (( 0 , 75 ), ( doc_ref . Width , 75 ), ( doc_ref . Width , 150 ), ( 0 , 150 )) doc_ref . selection . select ( selBounds2 ) # Load the selection from the just saved alpha channel, combining it with # the active selection. doc_ref . selection . load ( selAlpha , ps . SelectionType . ExtendSelection , False ) # Set ruler back to where it was. ps . app . Preferences . RulerUnits = start_ruler_units","title":"Load Selection"},{"location":"examples/#move-to-end","text":"# Import local modules import photoshop.api as ps # Get photoshop instance. app = ps . Application () # Add new document and set name to \"Example for move to End.\" active_document = app . documents . add ( name = \"Example for move to End.\" ) # Add a new layer set. group_layer = active_document . layerSets . add () # Add a layer in the group. layer = group_layer . artLayers . add () layer . name = \"This is a child layer.\" # Add a new layer in this active document top. top_layer = active_document . artLayers . add () top_layer . name = \"This is a top layer.\" top_layer . moveToEnd ( group_layer )","title":"Move To End"},{"location":"examples/#new-document","text":"# Create a new Photoshop document with diminsions 4 inches by 4 inches. # Import local modules import photoshop.api as ps # Start up Photoshop application app = ps . Application () start_ruler_units = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Pixels # Create the document docRef = app . documents . add ( 1920 , 1080 , 72.0 , \"My New Document\" ) # Make sure to set the ruler units prior to creating the document. app . preferences . rulerUnits = start_ruler_units","title":"New Document"},{"location":"examples/#open-psd","text":"# Import local modules from photoshop import Session import photoshop.api as ps # style 1 app = ps . Application () app . load ( \"your/psd/or/psb/file_path.psd\" ) # style 2 with Session ( \"your/psd/or/psb/file_path.psd\" , action = \"open\" ) as ps : ps . echo ( ps . active_document . name )","title":"Open Psd"},{"location":"examples/#operation-channels","text":"\"\"\"A examples to show you how to operation active document channels.\"\"\" # Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document print ( len ( doc . channels )) doc . channels . add () doc . channels . removeAll () channel = doc . channels . getByName ( \"Red\" ) print ( channel . name ) channel . remove ()","title":"Operation Channels"},{"location":"examples/#operation-layer-set","text":"\"\"\"A examples to show you how to operation layerSet.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : docRef = ps . active_document # Add a new layerSet. new_layer_set = docRef . layerSets . add () # Print the layerSet count. ps . echo ( docRef . layerSets . length ) ps . echo ( len ( docRef . layerSets )) # Rename the layerSet. docRef . layerSets [ 0 ] . name = \"New Name\" ps . echo ( new_layer_set . name ) # Change the layerSet opacity new_layer_set . opacity = 90 ps . echo ( new_layer_set . opacity ) # Duplicate the layerSet. duplicate_layer_set = new_layer_set . duplicate () # Add a new artLayer in current active document. layer = docRef . artLayers . add () # Move the artLayer under the duplicate layerSet. layer . move ( duplicate_layer_set , ps . ElementPlacement . PlaceInside ) # Merge the layerSet. merged_layer = duplicate_layer_set . merge () ps . echo ( merged_layer . name ) # Set visible. new_layer_set . visible = False merged_layer . remove ()","title":"Operation Layer Set"},{"location":"examples/#photoshop-session","text":"\"\"\"Add slate information dynamically.\"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"slate_template.psd\" ] with Session ( file_path , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) os . startfile ( jpg_file )","title":"Photoshop Session"},{"location":"examples/#replace-images","text":"\"\"\"Replace the image of the current active layer with a new image.\"\"\" # Import local modules from photoshop import Session with Session () as ps : replace_contents = ps . app . stringIDToTypeID ( \"placedLayerReplaceContents\" ) desc = ps . ActionDescriptor idnull = ps . app . charIDToTypeID ( \"null\" ) desc . putPath ( idnull , \"your/image/path.jpg\" ) ps . app . executeAction ( replace_contents , desc )","title":"Replace Images"},{"location":"examples/#rotate-layer","text":"\"\"\"This scripts demonstrates how to rotate a layer 45 degrees clockwise. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/RotateLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( app . documents ) > 0 : print ( app . activeDocument . activeLayer . typename ) if not app . activeDocument . activeLayer . isBackgroundLayer : docRef = app . activeDocument layerRef = docRef . layers [ 0 ] layerRef . rotate ( 45.0 ) else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"You must have at least one open document to run this script!\" )","title":"Rotate Layer"},{"location":"examples/#save-as-pdf","text":"\"\"\"Save current active document as a PDF file.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : option = ps . PDFSaveOptions ( jpegQuality = 12 , layers = True , view = True ) pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option ) with Session () as ps : option = ps . PDFSaveOptions () option . jpegQuality = 12 option . layers = True option . view = True # opens the saved PDF in Acrobat. pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option )","title":"Save As Pdf"},{"location":"examples/#save-as-tga","text":"# Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 text_color . rgb . red = 0 text_color . rgb . blue = 0 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color tga_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"test.tga\" ) doc . saveAs ( tga_file , ps . TargaSaveOptions (), asCopy = True ) os . startfile ( tga_file )","title":"Save As Tga"},{"location":"examples/#save-to-psd","text":"\"\"\"Save your current active document as a .psd file.\"\"\" # Import local modules from photoshop import Session with Session () as ps : psd_file = \"your/psd/save/file/path.psd\" doc = ps . active_document options = ps . PhotoshopSaveOptions () layers = doc . artLayers doc . saveAs ( psd_file , options , True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer )","title":"Save To Psd"},{"location":"examples/#selection-stroke","text":"\"\"\"Create a stroke around the current selection, Set the stroke color and width of the new stroke. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SelectionStroke.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( list (( i , x ) for i , x in enumerate ( app . documents , 1 ))) > 0 : if not app . activeDocument . activeLayer . isBackgroundLayer : psPixels = 1 start_ruler_units = app . Preferences . RulerUnits app . preferences . rulerUnits = ps . Units . Pixels selRef = app . activeDocument . selection offset = 10 selBounds = ( ( offset , offset ), ( app . activeDocument . width - offset , offset ), ( app . activeDocument . width - offset , app . activeDocument . height - offset ), ( offset , app . activeDocument . height - offset ), ) selRef . select ( selBounds ) selRef . selectBorder ( 5 ) # create text color properties strokeColor = ps . SolidColor () strokeColor . cmyk . cyan = 58 strokeColor . cmyk . magenta = 0 strokeColor . cmyk . yellow = 70 strokeColor . cmyk . black = 0 app . displayDialogs = ps . DialogModes . DisplayNoDialogs selRef . stroke ( strokeColor , 2 , ps . StrokeLocation . OutsideStroke , ps . ColorBlendMode . ColorBlendMode , 75 , True , ) # Set ruler units back the way we found it. app . preferences . rulerUnits = start_ruler_units else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"Create a document with an active selection before running this \" \"script!\" )","title":"Selection Stroke"},{"location":"examples/#session-callback","text":"# Import local modules from photoshop import Session def do_something ( photoshop_api ): print ( photoshop_api . active_document ) print ( \"Do something.\" ) with Session ( callback = do_something ) as ps : ps . echo ( ps . active_document . name ) ps . alert ( ps . active_document . name )","title":"Session Callback"},{"location":"examples/#session-document-duplicate","text":"\"\"\"Action for duplicate current active document.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"document_duplicate\" ) as ps : ps . echo ( ps . active_document . name )","title":"Session Document Duplicate"},{"location":"examples/#session-hello-world","text":"\"\"\"Add slate information dynamically.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as adobe : doc = adobe . app . documents . add ( 2000 , 2000 ) text_color = adobe . SolidColor () text_color . rgb . red = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = adobe . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = adobe . JPEGSaveOptions ( quality = 1 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) adobe . app . doJavaScript ( f 'alert(\"save to jpg: { jpg_file } \")' )","title":"Session Hello World"},{"location":"examples/#session-new-document","text":"\"\"\"Action for create new document and print new document name.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . echo ( ps . active_document . name )","title":"Session New Document"},{"location":"examples/#session-smart-sharpen","text":"\"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] with Session ( file_path , action = \"open\" ) as ps : def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = ps . app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = ps . app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = ps . app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = ps . app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = ps . app . charIDToTypeID ( \"Amnt\" ) idPrc = ps . app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = ps . app . charIDToTypeID ( \"Rds \" ) idPxl = ps . app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = ps . app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = ps . app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = ps . app . charIDToTypeID ( \"blur\" ) idblurType = ps . app . stringIDToTypeID ( \"blurType\" ) idGsnB = ps . app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) ps . app . ExecuteAction ( idsmart_sharpen_id , desc37 ) docRef = ps . active_document nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) SmartSharpen ( 300 , 2.0 , 20 )","title":"Session Smart Sharpen"},{"location":"examples/#set-active-layer","text":"\"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ActiveLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if app . documents . length < 1 : docRef = app . documents . add () else : docRef = app . activeDocument if docRef . layers . length < 2 : docRef . artLayers . add () activeLayerName = docRef . activeLayer . name if docRef . activeLayer . name != docRef . layers . item ( docRef . layers . length ) . name : docRef . activeLayer = docRef . layers . item ( docRef . layers . length ) else : docRef . activeLayer = docRef . layers . item ( 1 )","title":"Set Active Layer"},{"location":"examples/#smart-sharpen","text":"\"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules import photoshop.api as ps app = ps . Application () PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( file_path ) nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = app . charIDToTypeID ( \"Amnt\" ) idPrc = app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = app . charIDToTypeID ( \"Rds \" ) idPxl = app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = app . charIDToTypeID ( \"blur\" ) idblurType = app . stringIDToTypeID ( \"blurType\" ) idGsnB = app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) app . ExecuteAction ( idsmart_sharpen_id , desc37 ) SmartSharpen ( 300 , 2.0 , 20 )","title":"Smart Sharpen"},{"location":"examples/#toggle-proof-colors","text":"\"\"\"Toggle the proof color. Like operating in the menu: **View** > **Proof Colors** (Ctrl + Y) \"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . stringIDToTypeID ( \"toggleProofColors\" ))","title":"Toggle Proof Colors"},{"location":"examples/#trim","text":"\"\"\"A trim example.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () example_file = PSD_FILE [ \"trim.psd\" ] with Session ( example_file , action = \"open\" ) as ps : ps . active_document . trim ( ps . TrimType . TopLeftPixel , True , True , True , True )","title":"Trim"},{"location":"photoshop/","text":"photoshop Session Session of photoshop. We can control active documents in this Session. Attributes: Name Type Description app photoshop . application . Application __init__ ( file_path : str , action : str , callback : Any , auto_close : bool , ps_version : str ) Session of Photoshop. Examples: .. code-block:: python from photoshop import Session with Session(\"your/psd/or/psb/file_path.psd\", action=\"open\") as ps: ps.echo(ps.active_document.name) Parameters: Name Type Description Default file_path str The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. required action str Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. required callback Any The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. required auto_close bool Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. required ps_version str Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 required active_document ( active_document ) Set active document. alert ( text : str ) Alert message box in photoshop. Parameters: Name Type Description Default text str The text will pop up in photoshop. required close () closing current session. echo ( * args , ** kwargs ) Print message. api Python API for Photoshop. ActionDescriptor Bases: Photoshop clear () Clears the descriptor. count () The number of keys contained in the descriptor. erase ( key : int ) Erases a key form the descriptor. fromStream ( value : str ) Create a descriptor from a stream of bytes. for reading from disk. getBoolean ( key : int ) -> int Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean. getClass ( key ) Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class. getData ( key : int ) -> int Gets raw byte data as a string value. getDouble ( key : int ) -> int Gets the value of a key of type double. getEnumerationType ( index : int ) -> int Gets the enumeration type of a key. getEnumerationValue ( index : int ) -> int Gets the enumeration value of a key. getInteger ( index : int ) -> int Gets the value of a key of type integer. getKey ( index : int ) -> int Gets the ID of the key provided by index. getLargeInteger ( index : int ) -> int Gets the value of a key of type large integer. getList ( index : int ) -> ActionList Gets the value of a key of type list. getObjectType ( key : int ) -> int Gets the class ID of an object in a key of type object. getObjectValue ( key : int ) -> int Get the class ID of an object in a key of type object. getPath ( key : int ) -> Path Gets the value of a key of type. getReference ( key : int ) -> ActionReference Gets the value of a key of type. getString ( key : int ) -> str Gets the value of a key of type. getType ( key : int ) -> DescValueType Gets the type of a key. getUnitDoubleType ( key : int ) -> int Gets the unit type of a key of type UnitDouble. getUnitDoubleValue ( key : int ) -> int Gets the unit type of a key of type UnitDouble. hasKey ( key : int ) -> bool Checks whether the descriptor contains the provided key. isEqual ( otherDesc ) -> bool Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required putBoolean ( key : int , value : bool ) Sets the value for a key whose type is boolean. putClass ( key : int , value : int ) Sets the value for a key whose type is class. putData ( key : int , value : str ) Puts raw byte data as a string value. putDouble ( key : int , value : int ) Sets the value for a key whose type is double. putEnumerated ( key : int , enum_type : int , value : int ) Sets the enumeration type and value for a key. putInteger ( key : int , value : int ) Sets the value for a key whose type is integer. putLargeInteger ( key : int , value : int ) Sets the value for a key whose type is large integer. putList ( key : int , value : ActionList ) Sets the value for a key whose type is an ActionList object. putObject ( key : int , class_id : int , value ) Sets the value for a key whose type is an object. putPath ( key : int , value : str ) Sets the value for a key whose type is path. putReference ( key : int , value : ActionReference ) Sets the value for a key whose type is an object reference. putString ( key : int , value : str ) Sets the value for a key whose type is string. putUnitDouble ( key : int , unit_id : int , value : int ) Sets the value for a key whose type is a unit value formatted as double. toStream () -> str Gets the entire descriptor as as stream of bytes, for writing to disk. ActionReference Bases: Photoshop getForm () -> ReferenceFormType Gets the form of this action reference. getIdentifier () -> int Gets the identifier value for a reference whose form is identifier. getIndex () -> int Gets the index value for a reference in a list or array, putEnumerated ( desired_class , enum_type , value ) Puts an enumeration type and ID into a reference along with the desired class for the reference. Application Bases: Photoshop backgroundColor ( color ) Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required batch ( * args , ** kwargs ) Runs the batch automation routine. Similar to the File > Automate > Batch command. beep () Causes a \"beep\" sound. build () changeProgressText ( text ) Changes the text that appears in the progress window. colorSettings ( settings ) The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required currentTool ( tool_name ) Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required displayDialogs ( dialog_mode : DialogModes ) The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs. doAction ( action , action_from ) Plays the specified action from the Actions palette. doProgress ( title , javascript ) Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required doProgressTask ( index , javascript ) Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. documents () -> Documents ._documents.Documents: The Documents instance. eraseCustomOptions ( key ) Removes the specified user objects from the Photoshop registry. featureEnabled ( name ) Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial foregroundColor ( color : SolidColor ) Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required freeMemory () -> float The amount of unused memory available to . getCustomOptions ( key ) Retrieves user objects in the Photoshop registry for the ID with value key. load ( document_file_path ) Loads a support document. locale () -> str The language locale of the application. macintoshFileTypes () -> List [ str ] A list of the image file types Photoshop can open. measurementLog () The log of measurements taken. notifiers () The notifiers currently configured (in the Scripts Events Manager menu in the application). parent () The object\u2019s container. path () purge ( target ) Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required refresh () Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method. refreshFonts () Force the font list to get refreshed. runMenuItem ( menu_id ) Run a menu item given the menu ID. showColorPicker () Returns false if dialog is cancelled, true otherwise. togglePalettes () Toggle palette visibility. BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() ExportOptionsSaveForWeb Bases: Photoshop colors ( value ) The number of colors in the palette. GrayColor Bases: Photoshop gray ( value : float ) The gray value. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. SolidColor Bases: Photoshop isEqual ( color : RGBColor ) SolidColor object is visually equal to the specified color. model ( value : ColorModel ) The color model. nearestWebColor () -> RGBColor The nearest web color to the current color. TextItem Bases: Photoshop autoLeadingAmount ( value ) The percentage to use for auto (default) leading (in points). Valid only when useAutoLeading = True. capitalization ( value ) Sets text case. color ( color_value ) The color of textItem. contents ( text : str ) Set the actual text in the layer. Parameters: Name Type Description Default text str The actual text. required convertToShape () Converts the text item and its containing layer to a fill layer with the text changed to a clipping path. createPath () Creates a clipping path from the outlines of the actual text items (such as letters or words). position ( array ) The position of the origin for the text. The array must contain two values. Setting this property is basically equivalent to clicking the text tool at a point in the documents to create the point of origin for text. width ( value : float ) The width of the bounding box for paragraph text. Valid only when kind = TextType.PARAGRAPHTEXT. TiffSaveOptions Bases: Photoshop layerCompression ( value ) The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true. transparency ( value ) If true, saves the transparency as an additional alpha channel when the file is opened in another application. _active_layer ActiveLayer Bases: Photoshop The selected layer. add () Adds an element. name () -> str The name of the layer. _artlayer ArtLayer Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application). adjustBrightnessContrast ( brightness , contrast ) Adjusts the brightness and contrast. Parameters: Name Type Description Default brightness int The brightness amount. Range: -100 to 100. required contrast int The contrast amount. Range: -100 to 100. required adjustColorBalance ( shadows , midtones , highlights , preserveLuminosity ) Adjusts the color balance of the layer\u2019s component channels. Parameters: Name Type Description Default shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required preserveLuminosity If true, luminosity is preserved. required adjustCurves ( curveShape ) Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: Name Type Description Default curveShape The curve points. The number of points must be between 2 and 14. required adjustLevels ( inputRangeStart , inputRangeEnd , inputRangeGamma , outputRangeStart , outputRangeEnd ) Adjusts levels of the selected channels. Parameters: Name Type Description Default inputRangeStart required inputRangeEnd required inputRangeGamma required outputRangeStart required outputRangeEnd required applyAverage () Applies the average filter. applyBlur () Applies the blur filter. applyBlurMore () Applies the blur more filter. applyClouds () Applies the clouds filter. applyCustomFilter ( characteristics , scale , offset ) Applies the custom filter. applyDeInterlace ( eliminateFields , createFields ) Applies the de-interlace filter. applyDifferenceClouds () Applies the difference clouds filter. applyDiffuseGlow ( graininess , amount , clear_amount ) Applies the diffuse glow filter. Parameters: Name Type Description Default graininess The amount of graininess. Range: 0 to 10. required amount The glow amount. Range: 0 to 20. required clear_amount The clear amount. Range: 0 to 20. required applyDisplace ( horizontalScale , verticalScale , displacementType , undefinedAreas , displacementMapFile ) Applies the displace filter. applyDustAndScratches ( radius , threshold ) Applies the dust and scratches filter. applyGaussianBlur ( radius ) Applies the gaussian blur filter. applyHighPass ( radius ) Applies the high pass filter. applyLensBlur ( source , focalDistance , invertDepthMap , shape , radius , bladeCurvature , rotation , brightness , threshold , amount , distribution , monochromatic ) Apply the lens blur filter. fillOpacity ( value ) he interior opacity of the layer. Range: 0.0 to 100.0. kind ( layer_type ) set the layer kind. parent ( value ) Set the object\u2019s container. _core This class provides all photoshop API core functions. Photoshop Bases: object Core API for all photoshop objects. _assemble_program_name ( names : List [ str ]) Assemble program name of Photoshop. Parameters: Name Type Description Default names list of str The name to be assembled. .e.g: [ 'Photoshop', 'ActionDescriptor', '140' ] required Returns: Name Type Description str Assembled name. Examples: Photoshop.ActionDescriptor Photoshop.ActionDescriptor.140 Photoshop.ActionList Photoshop.ActionList.140 Photoshop.ActionReference Photoshop.ActionReference.140 Photoshop.Application Photoshop.Application.140 Photoshop.BatchOptions Photoshop.BatchOptions.140 Photoshop.BitmapConversionOptions Photoshop.BMPSaveOptions Photoshop.BMPSaveOptions.140 Photoshop.CameraRAWOpenOptions Photoshop.CameraRAWOpenOptions.140 get_application_path () get_plugin_path () -> str The absolute plugin path of Photoshop. get_presets_path () -> str The absolute presets path of Photoshop. get_script_path () -> str The absolute scripts path of Photoshop. open_key ( key : str ) -> str Open the register key. Parameters: Name Type Description Default key str The key of register. required Returns: Type Description str The handle to the specified key. typename () -> str Current typename. _document The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method. Document Bases: Photoshop The active containment object for the layers and all other objects in the script; the basic canvas for the file. activeHistoryBrushSource () The history state to use with the history brush. activeHistoryState () The current history state for this document. activeLayer ( layer ) Sets the select layer as active layer. autoCount ( * args , ** kwargs ) Counts the objects in the Document. backgroundLayer () The background layer for the Document. changeMode ( * args , ** kwargs ) Changes the mode of the Document. cloudDocument () This document is in the cloud. cloudWorkAreaDirectory () Local directory for this cloud document. colorSamplers () The current color samplers associated with the Document. componentChannels () The color component channels for this Document. countItems () The current count items in the Document. crop ( bounds , angle , width , height ) Crops the document. Parameters: Name Type Description Default bounds list of int Four coordinates for the region remaining after cropping. required angle float The angle of cropping bounds. required width int The width of the resulting document. required height int The height of the resulting document. required exportDocument ( file_path , exportAs , options ) Exports the Document. flatten () Flattens all layers. fullName () The full path name of the Document. height () The height of the Document. histogram () A histogram showing the number of pixels at each color intensity level for the composite channel. history_states () The history states collection in this Document. id () The unique ID of this Document. info () Metadata about the Document. layerComps () The layer comps collection in this Document. layerSets () The layer sets collection in the Document. layers () The layers collection in the Document. managed () If true, the Document is a workgroup Document. measurement_scale () The measurement scale of the Document. mergeVisibleLayers () Flattens all visible layers in the Document. mode () The color profile. name () -> str The Document name. parent () The object's container. paste () Pastes contents of the clipboard into the Document. pixelAspectRatio () The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000. print () Prints the document. printSettings () Document print settings. quickMaskMode () If true, the document is in Quick Mask mode. recordMeasurements ( source , dataPoints ) Records the measurements of document. resizeImage ( width , height , resolution , automatic ) Changes the size of the image. Parameters: Name Type Description Default width The desired width of the image. required height The desired height of the image. required resolution The resolution (in pixels per inch) required resolution () The resolution of the Document (in pixels per inch) reveal_all () Expands the Document to show clipped sections. save () Saves the Document. saveAs ( file_path , options , asCopy , extensionType ) Saves the documents with the specified save options. Parameters: Name Type Description Default file_path str Absolute path of psd file. required options JPEGSaveOptions Save options. required asCopy bool required saved () If true, the Document been saved since the last change. selection () The selected area of the Document. splitChannels () Splits the channels of the document. suspendHistory ( historyString , javaScriptString ) Provides a single history state for the entire script. Allows a single undo for all actions taken in the script. trap ( width ) Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK. trim ( trim_type , top , left , bottom , right ) Trims the transparent area around the image on the specified sides of the canvas. Parameters: Name Type Description Default trim_type TrimType The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels required top bool If true, trims away the top of the document. required left bool If true, trims away the left of the document. required bottom bool If true, trims away the bottom of the document. required right bool If true, trims away the right of the document. required typename () The class name of the object. xmpMetadata () The XMP properties of the Document. The Camera RAW settings are stored here. _documentinfo Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application. DocumentInfo Bases: Photoshop Metadata about a document object. _notifier The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property Notifier Bases: Photoshop event () The event identifier, a four-character code or a unique string. eventClass () The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects. eventFile () -> Path The path to the file to execute when the event occurs and activates the notifier. remove () Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information. _notifiers The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property. _selection The selected area of the document or layer. Selection Bases: Photoshop contract ( contract_by ) Contracts the selection. expand ( by ) Expands the selection. Parameters: Name Type Description Default by int The amount to expand the selection. required feather ( by ) Feathers the edges of the selection. Parameters: Name Type Description Default by int The amount to feather the edge. required fill ( fill_type : SolidColor , mode : ColorBlendMode , opacity , preserve_transparency ) Fills the selection. grow ( tolerance , anti_alias ) Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: Name Type Description Default tolerance int The tolerance range. Range: 0 to 255. required anti_alias bool If true, anti-aliasing is used. required invert () Inverts the selection. load ( from_channel , combination , inverting ) Loads the selection from the specified channel. makeWorkPath ( tolerance ) Makes this selection item the workpath for this document. resize ( horizontal , vertical , anchor ) Resizes the selected area to the specified dimensions and anchor position. resizeBoundary ( horizontal , vertical , anchor ) Scales the boundary of the selection. rotate ( angle , anchor ) Rotates the object. rotateBoundary ( angle , anchor ) Rotates the boundary of the selection. selectBorder ( width ) Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: Name Type Description Default width int The width of the border selection. required smooth ( radius ) Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels). store ( into , combination ) Saves the selection as a channel. stroke ( strokeColor , width , location , mode , opacity , preserveTransparency ) Strokes the selection. Parameters: Name Type Description Default strokeColor SolidColor The color to stroke the selection with. required width int The stroke width. required location int The stroke location. required mode int The color blend mode. required opacity int The opacity of the stroke color as a percentage. Range: 1 to 100. required preserveTransparency bool If true, preserves transparency. required translate ( deltaX , deltaY ) Moves the object relative to its current position. translateBoundary ( deltaX , deltaY ) Moves the boundary of selection relative to its current position. action_descriptor A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide. ActionDescriptor Bases: Photoshop clear () Clears the descriptor. count () The number of keys contained in the descriptor. erase ( key : int ) Erases a key form the descriptor. fromStream ( value : str ) Create a descriptor from a stream of bytes. for reading from disk. getBoolean ( key : int ) -> int Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean. getClass ( key ) Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class. getData ( key : int ) -> int Gets raw byte data as a string value. getDouble ( key : int ) -> int Gets the value of a key of type double. getEnumerationType ( index : int ) -> int Gets the enumeration type of a key. getEnumerationValue ( index : int ) -> int Gets the enumeration value of a key. getInteger ( index : int ) -> int Gets the value of a key of type integer. getKey ( index : int ) -> int Gets the ID of the key provided by index. getLargeInteger ( index : int ) -> int Gets the value of a key of type large integer. getList ( index : int ) -> ActionList Gets the value of a key of type list. getObjectType ( key : int ) -> int Gets the class ID of an object in a key of type object. getObjectValue ( key : int ) -> int Get the class ID of an object in a key of type object. getPath ( key : int ) -> Path Gets the value of a key of type. getReference ( key : int ) -> ActionReference Gets the value of a key of type. getString ( key : int ) -> str Gets the value of a key of type. getType ( key : int ) -> DescValueType Gets the type of a key. getUnitDoubleType ( key : int ) -> int Gets the unit type of a key of type UnitDouble. getUnitDoubleValue ( key : int ) -> int Gets the unit type of a key of type UnitDouble. hasKey ( key : int ) -> bool Checks whether the descriptor contains the provided key. isEqual ( otherDesc ) -> bool Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required putBoolean ( key : int , value : bool ) Sets the value for a key whose type is boolean. putClass ( key : int , value : int ) Sets the value for a key whose type is class. putData ( key : int , value : str ) Puts raw byte data as a string value. putDouble ( key : int , value : int ) Sets the value for a key whose type is double. putEnumerated ( key : int , enum_type : int , value : int ) Sets the enumeration type and value for a key. putInteger ( key : int , value : int ) Sets the value for a key whose type is integer. putLargeInteger ( key : int , value : int ) Sets the value for a key whose type is large integer. putList ( key : int , value : ActionList ) Sets the value for a key whose type is an ActionList object. putObject ( key : int , class_id : int , value ) Sets the value for a key whose type is an object. putPath ( key : int , value : str ) Sets the value for a key whose type is path. putReference ( key : int , value : ActionReference ) Sets the value for a key whose type is an object reference. putString ( key : int , value : str ) Sets the value for a key whose type is string. putUnitDouble ( key : int , unit_id : int , value : int ) Sets the value for a key whose type is a unit value formatted as double. toStream () -> str Gets the entire descriptor as as stream of bytes, for writing to disk. action_list This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop. action_reference This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor. ActionReference Bases: Photoshop getForm () -> ReferenceFormType Gets the form of this action reference. getIdentifier () -> int Gets the identifier value for a reference whose form is identifier. getIndex () -> int Gets the index value for a reference in a list or array, putEnumerated ( desired_class , enum_type , value ) Puts an enumeration type and ID into a reference along with the desired class for the reference. application The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\") Application Bases: Photoshop backgroundColor ( color ) Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required batch ( * args , ** kwargs ) Runs the batch automation routine. Similar to the File > Automate > Batch command. beep () Causes a \"beep\" sound. build () changeProgressText ( text ) Changes the text that appears in the progress window. colorSettings ( settings ) The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required currentTool ( tool_name ) Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required displayDialogs ( dialog_mode : DialogModes ) The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs. doAction ( action , action_from ) Plays the specified action from the Actions palette. doProgress ( title , javascript ) Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required doProgressTask ( index , javascript ) Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. documents () -> Documents ._documents.Documents: The Documents instance. eraseCustomOptions ( key ) Removes the specified user objects from the Photoshop registry. featureEnabled ( name ) Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial foregroundColor ( color : SolidColor ) Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required freeMemory () -> float The amount of unused memory available to . getCustomOptions ( key ) Retrieves user objects in the Photoshop registry for the ID with value key. load ( document_file_path ) Loads a support document. locale () -> str The language locale of the application. macintoshFileTypes () -> List [ str ] A list of the image file types Photoshop can open. measurementLog () The log of measurements taken. notifiers () The notifiers currently configured (in the Scripts Events Manager menu in the application). parent () The object\u2019s container. path () purge ( target ) Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required refresh () Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method. refreshFonts () Force the font list to get refreshed. runMenuItem ( menu_id ) Run a menu item given the menu ID. showColorPicker () Returns false if dialog is cancelled, true otherwise. togglePalettes () Toggle palette visibility. colors GrayColor Bases: Photoshop gray ( value : float ) The gray value. cmyk Defines a CMYK color, used in the SolidColor object. gray Defines a gray color, used in the SolidColor object. GrayColor Bases: Photoshop gray ( value : float ) The gray value. hsb Defines an HSB color, used in the SolidColor object. enumerations constants type of enum for Photoshop. open_options EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() eps EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() save_options BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. ExportOptionsSaveForWeb Bases: Photoshop colors ( value ) The number of colors in the palette. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. TiffSaveOptions Bases: Photoshop layerCompression ( value ) The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true. transparency ( value ) If true, saves the transparency as an additional alpha channel when the file is opened in another application. bmp Options for saving a document in BMO format. BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. eps EPSSaveOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() embedColorProfile ( boolean : bool ) True to embed the color profile in this document. transparentWhites ( value : bool ) True to display white areas as transparent vectorData ( value : bool ) True to include vector data. Valid only if the document includes vector data (text). pdf Options for saving a document in Adobe PDF format. using the Document.saveAs() method. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. solid_color A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() . SolidColor Bases: Photoshop isEqual ( color : RGBColor ) SolidColor object is visually equal to the specified color. model ( value : ColorModel ) The color model. nearestWebColor () -> RGBColor The nearest web color to the current color. session Provides a public session class for Photoshop api. Usually we only need to manipulate the currently active document of photoshop. So as follows: from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Session Session of photoshop. We can control active documents in this Session. Attributes: Name Type Description app photoshop . application . Application __init__ ( file_path : str , action : str , callback : Any , auto_close : bool , ps_version : str ) Session of Photoshop. Examples: .. code-block:: python from photoshop import Session with Session(\"your/psd/or/psb/file_path.psd\", action=\"open\") as ps: ps.echo(ps.active_document.name) Parameters: Name Type Description Default file_path str The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. required action str Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. required callback Any The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. required auto_close bool Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. required ps_version str Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 required active_document ( active_document ) Set active document. alert ( text : str ) Alert message box in photoshop. Parameters: Name Type Description Default text str The text will pop up in photoshop. required close () closing current session. echo ( * args , ** kwargs ) Print message.","title":"Index"},{"location":"photoshop/#photoshop","text":"","title":"photoshop"},{"location":"photoshop/#photoshop.Session","text":"Session of photoshop. We can control active documents in this Session. Attributes: Name Type Description app photoshop . application . Application","title":"Session"},{"location":"photoshop/#photoshop.session.Session.__init__","text":"Session of Photoshop. Examples: .. code-block:: python from photoshop import Session with Session(\"your/psd/or/psb/file_path.psd\", action=\"open\") as ps: ps.echo(ps.active_document.name) Parameters: Name Type Description Default file_path str The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. required action str Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. required callback Any The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. required auto_close bool Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. required ps_version str Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 required","title":"__init__()"},{"location":"photoshop/#photoshop.session.Session.active_document","text":"Set active document.","title":"active_document()"},{"location":"photoshop/#photoshop.session.Session.alert","text":"Alert message box in photoshop. Parameters: Name Type Description Default text str The text will pop up in photoshop. required","title":"alert()"},{"location":"photoshop/#photoshop.session.Session.close","text":"closing current session.","title":"close()"},{"location":"photoshop/#photoshop.session.Session.echo","text":"Print message.","title":"echo()"},{"location":"photoshop/#photoshop.api","text":"Python API for Photoshop.","title":"api"},{"location":"photoshop/#photoshop.api.ActionDescriptor","text":"Bases: Photoshop","title":"ActionDescriptor"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.clear","text":"Clears the descriptor.","title":"clear()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.count","text":"The number of keys contained in the descriptor.","title":"count()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.erase","text":"Erases a key form the descriptor.","title":"erase()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.fromStream","text":"Create a descriptor from a stream of bytes. for reading from disk.","title":"fromStream()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getBoolean","text":"Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean.","title":"getBoolean()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getClass","text":"Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class.","title":"getClass()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getData","text":"Gets raw byte data as a string value.","title":"getData()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getDouble","text":"Gets the value of a key of type double.","title":"getDouble()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationType","text":"Gets the enumeration type of a key.","title":"getEnumerationType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationValue","text":"Gets the enumeration value of a key.","title":"getEnumerationValue()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getInteger","text":"Gets the value of a key of type integer.","title":"getInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getKey","text":"Gets the ID of the key provided by index.","title":"getKey()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getLargeInteger","text":"Gets the value of a key of type large integer.","title":"getLargeInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getList","text":"Gets the value of a key of type list.","title":"getList()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getObjectType","text":"Gets the class ID of an object in a key of type object.","title":"getObjectType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getObjectValue","text":"Get the class ID of an object in a key of type object.","title":"getObjectValue()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getPath","text":"Gets the value of a key of type.","title":"getPath()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getReference","text":"Gets the value of a key of type.","title":"getReference()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getString","text":"Gets the value of a key of type.","title":"getString()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getType","text":"Gets the type of a key.","title":"getType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleType","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleValue","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleValue()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.hasKey","text":"Checks whether the descriptor contains the provided key.","title":"hasKey()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.isEqual","text":"Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required","title":"isEqual()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putBoolean","text":"Sets the value for a key whose type is boolean.","title":"putBoolean()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putClass","text":"Sets the value for a key whose type is class.","title":"putClass()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putData","text":"Puts raw byte data as a string value.","title":"putData()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putDouble","text":"Sets the value for a key whose type is double.","title":"putDouble()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putEnumerated","text":"Sets the enumeration type and value for a key.","title":"putEnumerated()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putInteger","text":"Sets the value for a key whose type is integer.","title":"putInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putLargeInteger","text":"Sets the value for a key whose type is large integer.","title":"putLargeInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putList","text":"Sets the value for a key whose type is an ActionList object.","title":"putList()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putObject","text":"Sets the value for a key whose type is an object.","title":"putObject()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putPath","text":"Sets the value for a key whose type is path.","title":"putPath()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putReference","text":"Sets the value for a key whose type is an object reference.","title":"putReference()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putString","text":"Sets the value for a key whose type is string.","title":"putString()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putUnitDouble","text":"Sets the value for a key whose type is a unit value formatted as double.","title":"putUnitDouble()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.toStream","text":"Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"toStream()"},{"location":"photoshop/#photoshop.api.ActionReference","text":"Bases: Photoshop","title":"ActionReference"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.getForm","text":"Gets the form of this action reference.","title":"getForm()"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.getIdentifier","text":"Gets the identifier value for a reference whose form is identifier.","title":"getIdentifier()"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.getIndex","text":"Gets the index value for a reference in a list or array,","title":"getIndex()"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.putEnumerated","text":"Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"putEnumerated()"},{"location":"photoshop/#photoshop.api.Application","text":"Bases: Photoshop","title":"Application"},{"location":"photoshop/#photoshop.api.application.Application.backgroundColor","text":"Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"backgroundColor()"},{"location":"photoshop/#photoshop.api.application.Application.batch","text":"Runs the batch automation routine. Similar to the File > Automate > Batch command.","title":"batch()"},{"location":"photoshop/#photoshop.api.application.Application.beep","text":"Causes a \"beep\" sound.","title":"beep()"},{"location":"photoshop/#photoshop.api.application.Application.build","text":"","title":"build()"},{"location":"photoshop/#photoshop.api.application.Application.changeProgressText","text":"Changes the text that appears in the progress window.","title":"changeProgressText()"},{"location":"photoshop/#photoshop.api.application.Application.colorSettings","text":"The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required","title":"colorSettings()"},{"location":"photoshop/#photoshop.api.application.Application.currentTool","text":"Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required","title":"currentTool()"},{"location":"photoshop/#photoshop.api.application.Application.displayDialogs","text":"The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.","title":"displayDialogs()"},{"location":"photoshop/#photoshop.api.application.Application.doAction","text":"Plays the specified action from the Actions palette.","title":"doAction()"},{"location":"photoshop/#photoshop.api.application.Application.doProgress","text":"Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required","title":"doProgress()"},{"location":"photoshop/#photoshop.api.application.Application.doProgressTask","text":"Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.","title":"doProgressTask()"},{"location":"photoshop/#photoshop.api.application.Application.documents","text":"._documents.Documents: The Documents instance.","title":"documents()"},{"location":"photoshop/#photoshop.api.application.Application.eraseCustomOptions","text":"Removes the specified user objects from the Photoshop registry.","title":"eraseCustomOptions()"},{"location":"photoshop/#photoshop.api.application.Application.featureEnabled","text":"Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial","title":"featureEnabled()"},{"location":"photoshop/#photoshop.api.application.Application.foregroundColor","text":"Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"foregroundColor()"},{"location":"photoshop/#photoshop.api.application.Application.freeMemory","text":"The amount of unused memory available to .","title":"freeMemory()"},{"location":"photoshop/#photoshop.api.application.Application.getCustomOptions","text":"Retrieves user objects in the Photoshop registry for the ID with value key.","title":"getCustomOptions()"},{"location":"photoshop/#photoshop.api.application.Application.load","text":"Loads a support document.","title":"load()"},{"location":"photoshop/#photoshop.api.application.Application.locale","text":"The language locale of the application.","title":"locale()"},{"location":"photoshop/#photoshop.api.application.Application.macintoshFileTypes","text":"A list of the image file types Photoshop can open.","title":"macintoshFileTypes()"},{"location":"photoshop/#photoshop.api.application.Application.measurementLog","text":"The log of measurements taken.","title":"measurementLog()"},{"location":"photoshop/#photoshop.api.application.Application.notifiers","text":"The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers()"},{"location":"photoshop/#photoshop.api.application.Application.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"photoshop/#photoshop.api.application.Application.path","text":"","title":"path()"},{"location":"photoshop/#photoshop.api.application.Application.purge","text":"Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required","title":"purge()"},{"location":"photoshop/#photoshop.api.application.Application.refresh","text":"Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method.","title":"refresh()"},{"location":"photoshop/#photoshop.api.application.Application.refreshFonts","text":"Force the font list to get refreshed.","title":"refreshFonts()"},{"location":"photoshop/#photoshop.api.application.Application.runMenuItem","text":"Run a menu item given the menu ID.","title":"runMenuItem()"},{"location":"photoshop/#photoshop.api.application.Application.showColorPicker","text":"Returns false if dialog is cancelled, true otherwise.","title":"showColorPicker()"},{"location":"photoshop/#photoshop.api.application.Application.togglePalettes","text":"Toggle palette visibility.","title":"togglePalettes()"},{"location":"photoshop/#photoshop.api.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/#photoshop.api.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/#photoshop.api.ExportOptionsSaveForWeb","text":"Bases: Photoshop","title":"ExportOptionsSaveForWeb"},{"location":"photoshop/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colors","text":"The number of colors in the palette.","title":"colors()"},{"location":"photoshop/#photoshop.api.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/#photoshop.api.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/#photoshop.api.SolidColor","text":"Bases: Photoshop","title":"SolidColor"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor.isEqual","text":"SolidColor object is visually equal to the specified color.","title":"isEqual()"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor.model","text":"The color model.","title":"model()"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor.nearestWebColor","text":"The nearest web color to the current color.","title":"nearestWebColor()"},{"location":"photoshop/#photoshop.api.TextItem","text":"Bases: Photoshop","title":"TextItem"},{"location":"photoshop/#photoshop.api.text_item.TextItem.autoLeadingAmount","text":"The percentage to use for auto (default) leading (in points). Valid only when useAutoLeading = True.","title":"autoLeadingAmount()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.capitalization","text":"Sets text case.","title":"capitalization()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.color","text":"The color of textItem.","title":"color()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.contents","text":"Set the actual text in the layer. Parameters: Name Type Description Default text str The actual text. required","title":"contents()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.convertToShape","text":"Converts the text item and its containing layer to a fill layer with the text changed to a clipping path.","title":"convertToShape()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.createPath","text":"Creates a clipping path from the outlines of the actual text items (such as letters or words).","title":"createPath()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.position","text":"The position of the origin for the text. The array must contain two values. Setting this property is basically equivalent to clicking the text tool at a point in the documents to create the point of origin for text.","title":"position()"},{"location":"photoshop/#photoshop.api.text_item.TextItem.width","text":"The width of the bounding box for paragraph text. Valid only when kind = TextType.PARAGRAPHTEXT.","title":"width()"},{"location":"photoshop/#photoshop.api.TiffSaveOptions","text":"Bases: Photoshop","title":"TiffSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.tif.TiffSaveOptions.layerCompression","text":"The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true.","title":"layerCompression()"},{"location":"photoshop/#photoshop.api.save_options.tif.TiffSaveOptions.transparency","text":"If true, saves the transparency as an additional alpha channel when the file is opened in another application.","title":"transparency()"},{"location":"photoshop/#photoshop.api._active_layer","text":"","title":"_active_layer"},{"location":"photoshop/#photoshop.api._active_layer.ActiveLayer","text":"Bases: Photoshop The selected layer.","title":"ActiveLayer"},{"location":"photoshop/#photoshop.api._active_layer.ActiveLayer.add","text":"Adds an element.","title":"add()"},{"location":"photoshop/#photoshop.api._active_layer.ActiveLayer.name","text":"The name of the layer.","title":"name()"},{"location":"photoshop/#photoshop.api._artlayer","text":"","title":"_artlayer"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer","text":"Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application).","title":"ArtLayer"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.adjustBrightnessContrast","text":"Adjusts the brightness and contrast. Parameters: Name Type Description Default brightness int The brightness amount. Range: -100 to 100. required contrast int The contrast amount. Range: -100 to 100. required","title":"adjustBrightnessContrast()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.adjustColorBalance","text":"Adjusts the color balance of the layer\u2019s component channels. Parameters: Name Type Description Default shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required preserveLuminosity If true, luminosity is preserved. required","title":"adjustColorBalance()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.adjustCurves","text":"Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: Name Type Description Default curveShape The curve points. The number of points must be between 2 and 14. required","title":"adjustCurves()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.adjustLevels","text":"Adjusts levels of the selected channels. Parameters: Name Type Description Default inputRangeStart required inputRangeEnd required inputRangeGamma required outputRangeStart required outputRangeEnd required","title":"adjustLevels()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyAverage","text":"Applies the average filter.","title":"applyAverage()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyBlur","text":"Applies the blur filter.","title":"applyBlur()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyBlurMore","text":"Applies the blur more filter.","title":"applyBlurMore()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyClouds","text":"Applies the clouds filter.","title":"applyClouds()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyCustomFilter","text":"Applies the custom filter.","title":"applyCustomFilter()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyDeInterlace","text":"Applies the de-interlace filter.","title":"applyDeInterlace()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyDifferenceClouds","text":"Applies the difference clouds filter.","title":"applyDifferenceClouds()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyDiffuseGlow","text":"Applies the diffuse glow filter. Parameters: Name Type Description Default graininess The amount of graininess. Range: 0 to 10. required amount The glow amount. Range: 0 to 20. required clear_amount The clear amount. Range: 0 to 20. required","title":"applyDiffuseGlow()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyDisplace","text":"Applies the displace filter.","title":"applyDisplace()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyDustAndScratches","text":"Applies the dust and scratches filter.","title":"applyDustAndScratches()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyGaussianBlur","text":"Applies the gaussian blur filter.","title":"applyGaussianBlur()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyHighPass","text":"Applies the high pass filter.","title":"applyHighPass()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.applyLensBlur","text":"Apply the lens blur filter.","title":"applyLensBlur()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.fillOpacity","text":"he interior opacity of the layer. Range: 0.0 to 100.0.","title":"fillOpacity()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.kind","text":"set the layer kind.","title":"kind()"},{"location":"photoshop/#photoshop.api._artlayer.ArtLayer.parent","text":"Set the object\u2019s container.","title":"parent()"},{"location":"photoshop/#photoshop.api._core","text":"This class provides all photoshop API core functions.","title":"_core"},{"location":"photoshop/#photoshop.api._core.Photoshop","text":"Bases: object Core API for all photoshop objects.","title":"Photoshop"},{"location":"photoshop/#photoshop.api._core.Photoshop._assemble_program_name","text":"Assemble program name of Photoshop. Parameters: Name Type Description Default names list of str The name to be assembled. .e.g: [ 'Photoshop', 'ActionDescriptor', '140' ] required Returns: Name Type Description str Assembled name. Examples: Photoshop.ActionDescriptor Photoshop.ActionDescriptor.140 Photoshop.ActionList Photoshop.ActionList.140 Photoshop.ActionReference Photoshop.ActionReference.140 Photoshop.Application Photoshop.Application.140 Photoshop.BatchOptions Photoshop.BatchOptions.140 Photoshop.BitmapConversionOptions Photoshop.BMPSaveOptions Photoshop.BMPSaveOptions.140 Photoshop.CameraRAWOpenOptions Photoshop.CameraRAWOpenOptions.140","title":"_assemble_program_name()"},{"location":"photoshop/#photoshop.api._core.Photoshop.get_application_path","text":"","title":"get_application_path()"},{"location":"photoshop/#photoshop.api._core.Photoshop.get_plugin_path","text":"The absolute plugin path of Photoshop.","title":"get_plugin_path()"},{"location":"photoshop/#photoshop.api._core.Photoshop.get_presets_path","text":"The absolute presets path of Photoshop.","title":"get_presets_path()"},{"location":"photoshop/#photoshop.api._core.Photoshop.get_script_path","text":"The absolute scripts path of Photoshop.","title":"get_script_path()"},{"location":"photoshop/#photoshop.api._core.Photoshop.open_key","text":"Open the register key. Parameters: Name Type Description Default key str The key of register. required Returns: Type Description str The handle to the specified key.","title":"open_key()"},{"location":"photoshop/#photoshop.api._core.Photoshop.typename","text":"Current typename.","title":"typename()"},{"location":"photoshop/#photoshop.api._document","text":"The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method.","title":"_document"},{"location":"photoshop/#photoshop.api._document.Document","text":"Bases: Photoshop The active containment object for the layers and all other objects in the script; the basic canvas for the file.","title":"Document"},{"location":"photoshop/#photoshop.api._document.Document.activeHistoryBrushSource","text":"The history state to use with the history brush.","title":"activeHistoryBrushSource()"},{"location":"photoshop/#photoshop.api._document.Document.activeHistoryState","text":"The current history state for this document.","title":"activeHistoryState()"},{"location":"photoshop/#photoshop.api._document.Document.activeLayer","text":"Sets the select layer as active layer.","title":"activeLayer()"},{"location":"photoshop/#photoshop.api._document.Document.autoCount","text":"Counts the objects in the Document.","title":"autoCount()"},{"location":"photoshop/#photoshop.api._document.Document.backgroundLayer","text":"The background layer for the Document.","title":"backgroundLayer()"},{"location":"photoshop/#photoshop.api._document.Document.changeMode","text":"Changes the mode of the Document.","title":"changeMode()"},{"location":"photoshop/#photoshop.api._document.Document.cloudDocument","text":"This document is in the cloud.","title":"cloudDocument()"},{"location":"photoshop/#photoshop.api._document.Document.cloudWorkAreaDirectory","text":"Local directory for this cloud document.","title":"cloudWorkAreaDirectory()"},{"location":"photoshop/#photoshop.api._document.Document.colorSamplers","text":"The current color samplers associated with the Document.","title":"colorSamplers()"},{"location":"photoshop/#photoshop.api._document.Document.componentChannels","text":"The color component channels for this Document.","title":"componentChannels()"},{"location":"photoshop/#photoshop.api._document.Document.countItems","text":"The current count items in the Document.","title":"countItems()"},{"location":"photoshop/#photoshop.api._document.Document.crop","text":"Crops the document. Parameters: Name Type Description Default bounds list of int Four coordinates for the region remaining after cropping. required angle float The angle of cropping bounds. required width int The width of the resulting document. required height int The height of the resulting document. required","title":"crop()"},{"location":"photoshop/#photoshop.api._document.Document.exportDocument","text":"Exports the Document.","title":"exportDocument()"},{"location":"photoshop/#photoshop.api._document.Document.flatten","text":"Flattens all layers.","title":"flatten()"},{"location":"photoshop/#photoshop.api._document.Document.fullName","text":"The full path name of the Document.","title":"fullName()"},{"location":"photoshop/#photoshop.api._document.Document.height","text":"The height of the Document.","title":"height()"},{"location":"photoshop/#photoshop.api._document.Document.histogram","text":"A histogram showing the number of pixels at each color intensity level for the composite channel.","title":"histogram()"},{"location":"photoshop/#photoshop.api._document.Document.history_states","text":"The history states collection in this Document.","title":"history_states()"},{"location":"photoshop/#photoshop.api._document.Document.id","text":"The unique ID of this Document.","title":"id()"},{"location":"photoshop/#photoshop.api._document.Document.info","text":"Metadata about the Document.","title":"info()"},{"location":"photoshop/#photoshop.api._document.Document.layerComps","text":"The layer comps collection in this Document.","title":"layerComps()"},{"location":"photoshop/#photoshop.api._document.Document.layerSets","text":"The layer sets collection in the Document.","title":"layerSets()"},{"location":"photoshop/#photoshop.api._document.Document.layers","text":"The layers collection in the Document.","title":"layers()"},{"location":"photoshop/#photoshop.api._document.Document.managed","text":"If true, the Document is a workgroup Document.","title":"managed()"},{"location":"photoshop/#photoshop.api._document.Document.measurement_scale","text":"The measurement scale of the Document.","title":"measurement_scale()"},{"location":"photoshop/#photoshop.api._document.Document.mergeVisibleLayers","text":"Flattens all visible layers in the Document.","title":"mergeVisibleLayers()"},{"location":"photoshop/#photoshop.api._document.Document.mode","text":"The color profile.","title":"mode()"},{"location":"photoshop/#photoshop.api._document.Document.name","text":"The Document name.","title":"name()"},{"location":"photoshop/#photoshop.api._document.Document.parent","text":"The object's container.","title":"parent()"},{"location":"photoshop/#photoshop.api._document.Document.paste","text":"Pastes contents of the clipboard into the Document.","title":"paste()"},{"location":"photoshop/#photoshop.api._document.Document.pixelAspectRatio","text":"The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000.","title":"pixelAspectRatio()"},{"location":"photoshop/#photoshop.api._document.Document.print","text":"Prints the document.","title":"print()"},{"location":"photoshop/#photoshop.api._document.Document.printSettings","text":"Document print settings.","title":"printSettings()"},{"location":"photoshop/#photoshop.api._document.Document.quickMaskMode","text":"If true, the document is in Quick Mask mode.","title":"quickMaskMode()"},{"location":"photoshop/#photoshop.api._document.Document.recordMeasurements","text":"Records the measurements of document.","title":"recordMeasurements()"},{"location":"photoshop/#photoshop.api._document.Document.resizeImage","text":"Changes the size of the image. Parameters: Name Type Description Default width The desired width of the image. required height The desired height of the image. required resolution The resolution (in pixels per inch) required","title":"resizeImage()"},{"location":"photoshop/#photoshop.api._document.Document.resolution","text":"The resolution of the Document (in pixels per inch)","title":"resolution()"},{"location":"photoshop/#photoshop.api._document.Document.reveal_all","text":"Expands the Document to show clipped sections.","title":"reveal_all()"},{"location":"photoshop/#photoshop.api._document.Document.save","text":"Saves the Document.","title":"save()"},{"location":"photoshop/#photoshop.api._document.Document.saveAs","text":"Saves the documents with the specified save options. Parameters: Name Type Description Default file_path str Absolute path of psd file. required options JPEGSaveOptions Save options. required asCopy bool required","title":"saveAs()"},{"location":"photoshop/#photoshop.api._document.Document.saved","text":"If true, the Document been saved since the last change.","title":"saved()"},{"location":"photoshop/#photoshop.api._document.Document.selection","text":"The selected area of the Document.","title":"selection()"},{"location":"photoshop/#photoshop.api._document.Document.splitChannels","text":"Splits the channels of the document.","title":"splitChannels()"},{"location":"photoshop/#photoshop.api._document.Document.suspendHistory","text":"Provides a single history state for the entire script. Allows a single undo for all actions taken in the script.","title":"suspendHistory()"},{"location":"photoshop/#photoshop.api._document.Document.trap","text":"Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK.","title":"trap()"},{"location":"photoshop/#photoshop.api._document.Document.trim","text":"Trims the transparent area around the image on the specified sides of the canvas. Parameters: Name Type Description Default trim_type TrimType The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels required top bool If true, trims away the top of the document. required left bool If true, trims away the left of the document. required bottom bool If true, trims away the bottom of the document. required right bool If true, trims away the right of the document. required","title":"trim()"},{"location":"photoshop/#photoshop.api._document.Document.typename","text":"The class name of the object.","title":"typename()"},{"location":"photoshop/#photoshop.api._document.Document.xmpMetadata","text":"The XMP properties of the Document. The Camera RAW settings are stored here.","title":"xmpMetadata()"},{"location":"photoshop/#photoshop.api._documentinfo","text":"Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application.","title":"_documentinfo"},{"location":"photoshop/#photoshop.api._documentinfo.DocumentInfo","text":"Bases: Photoshop Metadata about a document object.","title":"DocumentInfo"},{"location":"photoshop/#photoshop.api._notifier","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property","title":"_notifier"},{"location":"photoshop/#photoshop.api._notifier.Notifier","text":"Bases: Photoshop","title":"Notifier"},{"location":"photoshop/#photoshop.api._notifier.Notifier.event","text":"The event identifier, a four-character code or a unique string.","title":"event()"},{"location":"photoshop/#photoshop.api._notifier.Notifier.eventClass","text":"The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects.","title":"eventClass()"},{"location":"photoshop/#photoshop.api._notifier.Notifier.eventFile","text":"The path to the file to execute when the event occurs and activates the notifier.","title":"eventFile()"},{"location":"photoshop/#photoshop.api._notifier.Notifier.remove","text":"Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information.","title":"remove()"},{"location":"photoshop/#photoshop.api._notifiers","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property.","title":"_notifiers"},{"location":"photoshop/#photoshop.api._selection","text":"The selected area of the document or layer.","title":"_selection"},{"location":"photoshop/#photoshop.api._selection.Selection","text":"Bases: Photoshop","title":"Selection"},{"location":"photoshop/#photoshop.api._selection.Selection.contract","text":"Contracts the selection.","title":"contract()"},{"location":"photoshop/#photoshop.api._selection.Selection.expand","text":"Expands the selection. Parameters: Name Type Description Default by int The amount to expand the selection. required","title":"expand()"},{"location":"photoshop/#photoshop.api._selection.Selection.feather","text":"Feathers the edges of the selection. Parameters: Name Type Description Default by int The amount to feather the edge. required","title":"feather()"},{"location":"photoshop/#photoshop.api._selection.Selection.fill","text":"Fills the selection.","title":"fill()"},{"location":"photoshop/#photoshop.api._selection.Selection.grow","text":"Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: Name Type Description Default tolerance int The tolerance range. Range: 0 to 255. required anti_alias bool If true, anti-aliasing is used. required","title":"grow()"},{"location":"photoshop/#photoshop.api._selection.Selection.invert","text":"Inverts the selection.","title":"invert()"},{"location":"photoshop/#photoshop.api._selection.Selection.load","text":"Loads the selection from the specified channel.","title":"load()"},{"location":"photoshop/#photoshop.api._selection.Selection.makeWorkPath","text":"Makes this selection item the workpath for this document.","title":"makeWorkPath()"},{"location":"photoshop/#photoshop.api._selection.Selection.resize","text":"Resizes the selected area to the specified dimensions and anchor position.","title":"resize()"},{"location":"photoshop/#photoshop.api._selection.Selection.resizeBoundary","text":"Scales the boundary of the selection.","title":"resizeBoundary()"},{"location":"photoshop/#photoshop.api._selection.Selection.rotate","text":"Rotates the object.","title":"rotate()"},{"location":"photoshop/#photoshop.api._selection.Selection.rotateBoundary","text":"Rotates the boundary of the selection.","title":"rotateBoundary()"},{"location":"photoshop/#photoshop.api._selection.Selection.selectBorder","text":"Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: Name Type Description Default width int The width of the border selection. required","title":"selectBorder()"},{"location":"photoshop/#photoshop.api._selection.Selection.smooth","text":"Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels).","title":"smooth()"},{"location":"photoshop/#photoshop.api._selection.Selection.store","text":"Saves the selection as a channel.","title":"store()"},{"location":"photoshop/#photoshop.api._selection.Selection.stroke","text":"Strokes the selection. Parameters: Name Type Description Default strokeColor SolidColor The color to stroke the selection with. required width int The stroke width. required location int The stroke location. required mode int The color blend mode. required opacity int The opacity of the stroke color as a percentage. Range: 1 to 100. required preserveTransparency bool If true, preserves transparency. required","title":"stroke()"},{"location":"photoshop/#photoshop.api._selection.Selection.translate","text":"Moves the object relative to its current position.","title":"translate()"},{"location":"photoshop/#photoshop.api._selection.Selection.translateBoundary","text":"Moves the boundary of selection relative to its current position.","title":"translateBoundary()"},{"location":"photoshop/#photoshop.api.action_descriptor","text":"A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide.","title":"action_descriptor"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor","text":"Bases: Photoshop","title":"ActionDescriptor"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.clear","text":"Clears the descriptor.","title":"clear()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.count","text":"The number of keys contained in the descriptor.","title":"count()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.erase","text":"Erases a key form the descriptor.","title":"erase()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.fromStream","text":"Create a descriptor from a stream of bytes. for reading from disk.","title":"fromStream()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getBoolean","text":"Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean.","title":"getBoolean()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getClass","text":"Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class.","title":"getClass()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getData","text":"Gets raw byte data as a string value.","title":"getData()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getDouble","text":"Gets the value of a key of type double.","title":"getDouble()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationType","text":"Gets the enumeration type of a key.","title":"getEnumerationType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationValue","text":"Gets the enumeration value of a key.","title":"getEnumerationValue()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getInteger","text":"Gets the value of a key of type integer.","title":"getInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getKey","text":"Gets the ID of the key provided by index.","title":"getKey()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getLargeInteger","text":"Gets the value of a key of type large integer.","title":"getLargeInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getList","text":"Gets the value of a key of type list.","title":"getList()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getObjectType","text":"Gets the class ID of an object in a key of type object.","title":"getObjectType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getObjectValue","text":"Get the class ID of an object in a key of type object.","title":"getObjectValue()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getPath","text":"Gets the value of a key of type.","title":"getPath()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getReference","text":"Gets the value of a key of type.","title":"getReference()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getString","text":"Gets the value of a key of type.","title":"getString()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getType","text":"Gets the type of a key.","title":"getType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleType","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleType()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleValue","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleValue()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.hasKey","text":"Checks whether the descriptor contains the provided key.","title":"hasKey()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.isEqual","text":"Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required","title":"isEqual()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putBoolean","text":"Sets the value for a key whose type is boolean.","title":"putBoolean()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putClass","text":"Sets the value for a key whose type is class.","title":"putClass()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putData","text":"Puts raw byte data as a string value.","title":"putData()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putDouble","text":"Sets the value for a key whose type is double.","title":"putDouble()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putEnumerated","text":"Sets the enumeration type and value for a key.","title":"putEnumerated()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putInteger","text":"Sets the value for a key whose type is integer.","title":"putInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putLargeInteger","text":"Sets the value for a key whose type is large integer.","title":"putLargeInteger()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putList","text":"Sets the value for a key whose type is an ActionList object.","title":"putList()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putObject","text":"Sets the value for a key whose type is an object.","title":"putObject()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putPath","text":"Sets the value for a key whose type is path.","title":"putPath()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putReference","text":"Sets the value for a key whose type is an object reference.","title":"putReference()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putString","text":"Sets the value for a key whose type is string.","title":"putString()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.putUnitDouble","text":"Sets the value for a key whose type is a unit value formatted as double.","title":"putUnitDouble()"},{"location":"photoshop/#photoshop.api.action_descriptor.ActionDescriptor.toStream","text":"Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"toStream()"},{"location":"photoshop/#photoshop.api.action_list","text":"This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop.","title":"action_list"},{"location":"photoshop/#photoshop.api.action_reference","text":"This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor.","title":"action_reference"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference","text":"Bases: Photoshop","title":"ActionReference"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.getForm","text":"Gets the form of this action reference.","title":"getForm()"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.getIdentifier","text":"Gets the identifier value for a reference whose form is identifier.","title":"getIdentifier()"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.getIndex","text":"Gets the index value for a reference in a list or array,","title":"getIndex()"},{"location":"photoshop/#photoshop.api.action_reference.ActionReference.putEnumerated","text":"Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"putEnumerated()"},{"location":"photoshop/#photoshop.api.application","text":"The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\")","title":"application"},{"location":"photoshop/#photoshop.api.application.Application","text":"Bases: Photoshop","title":"Application"},{"location":"photoshop/#photoshop.api.application.Application.backgroundColor","text":"Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"backgroundColor()"},{"location":"photoshop/#photoshop.api.application.Application.batch","text":"Runs the batch automation routine. Similar to the File > Automate > Batch command.","title":"batch()"},{"location":"photoshop/#photoshop.api.application.Application.beep","text":"Causes a \"beep\" sound.","title":"beep()"},{"location":"photoshop/#photoshop.api.application.Application.build","text":"","title":"build()"},{"location":"photoshop/#photoshop.api.application.Application.changeProgressText","text":"Changes the text that appears in the progress window.","title":"changeProgressText()"},{"location":"photoshop/#photoshop.api.application.Application.colorSettings","text":"The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required","title":"colorSettings()"},{"location":"photoshop/#photoshop.api.application.Application.currentTool","text":"Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required","title":"currentTool()"},{"location":"photoshop/#photoshop.api.application.Application.displayDialogs","text":"The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.","title":"displayDialogs()"},{"location":"photoshop/#photoshop.api.application.Application.doAction","text":"Plays the specified action from the Actions palette.","title":"doAction()"},{"location":"photoshop/#photoshop.api.application.Application.doProgress","text":"Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required","title":"doProgress()"},{"location":"photoshop/#photoshop.api.application.Application.doProgressTask","text":"Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.","title":"doProgressTask()"},{"location":"photoshop/#photoshop.api.application.Application.documents","text":"._documents.Documents: The Documents instance.","title":"documents()"},{"location":"photoshop/#photoshop.api.application.Application.eraseCustomOptions","text":"Removes the specified user objects from the Photoshop registry.","title":"eraseCustomOptions()"},{"location":"photoshop/#photoshop.api.application.Application.featureEnabled","text":"Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial","title":"featureEnabled()"},{"location":"photoshop/#photoshop.api.application.Application.foregroundColor","text":"Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"foregroundColor()"},{"location":"photoshop/#photoshop.api.application.Application.freeMemory","text":"The amount of unused memory available to .","title":"freeMemory()"},{"location":"photoshop/#photoshop.api.application.Application.getCustomOptions","text":"Retrieves user objects in the Photoshop registry for the ID with value key.","title":"getCustomOptions()"},{"location":"photoshop/#photoshop.api.application.Application.load","text":"Loads a support document.","title":"load()"},{"location":"photoshop/#photoshop.api.application.Application.locale","text":"The language locale of the application.","title":"locale()"},{"location":"photoshop/#photoshop.api.application.Application.macintoshFileTypes","text":"A list of the image file types Photoshop can open.","title":"macintoshFileTypes()"},{"location":"photoshop/#photoshop.api.application.Application.measurementLog","text":"The log of measurements taken.","title":"measurementLog()"},{"location":"photoshop/#photoshop.api.application.Application.notifiers","text":"The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers()"},{"location":"photoshop/#photoshop.api.application.Application.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"photoshop/#photoshop.api.application.Application.path","text":"","title":"path()"},{"location":"photoshop/#photoshop.api.application.Application.purge","text":"Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required","title":"purge()"},{"location":"photoshop/#photoshop.api.application.Application.refresh","text":"Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method.","title":"refresh()"},{"location":"photoshop/#photoshop.api.application.Application.refreshFonts","text":"Force the font list to get refreshed.","title":"refreshFonts()"},{"location":"photoshop/#photoshop.api.application.Application.runMenuItem","text":"Run a menu item given the menu ID.","title":"runMenuItem()"},{"location":"photoshop/#photoshop.api.application.Application.showColorPicker","text":"Returns false if dialog is cancelled, true otherwise.","title":"showColorPicker()"},{"location":"photoshop/#photoshop.api.application.Application.togglePalettes","text":"Toggle palette visibility.","title":"togglePalettes()"},{"location":"photoshop/#photoshop.api.colors","text":"","title":"colors"},{"location":"photoshop/#photoshop.api.colors.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/#photoshop.api.colors.cmyk","text":"Defines a CMYK color, used in the SolidColor object.","title":"cmyk"},{"location":"photoshop/#photoshop.api.colors.gray","text":"Defines a gray color, used in the SolidColor object.","title":"gray"},{"location":"photoshop/#photoshop.api.colors.gray.GrayColor","text":"Bases: Photoshop gray ( value : float ) The gray value.","title":"GrayColor"},{"location":"photoshop/#photoshop.api.colors.hsb","text":"Defines an HSB color, used in the SolidColor object.","title":"hsb"},{"location":"photoshop/#photoshop.api.enumerations","text":"constants type of enum for Photoshop.","title":"enumerations"},{"location":"photoshop/#photoshop.api.open_options","text":"","title":"open_options"},{"location":"photoshop/#photoshop.api.open_options.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/#photoshop.api.open_options.eps","text":"","title":"eps"},{"location":"photoshop/#photoshop.api.open_options.eps.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/#photoshop.api.save_options","text":"","title":"save_options"},{"location":"photoshop/#photoshop.api.save_options.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/#photoshop.api.save_options.ExportOptionsSaveForWeb","text":"Bases: Photoshop","title":"ExportOptionsSaveForWeb"},{"location":"photoshop/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colors","text":"The number of colors in the palette.","title":"colors()"},{"location":"photoshop/#photoshop.api.save_options.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/#photoshop.api.save_options.TiffSaveOptions","text":"Bases: Photoshop","title":"TiffSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.tif.TiffSaveOptions.layerCompression","text":"The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true.","title":"layerCompression()"},{"location":"photoshop/#photoshop.api.save_options.tif.TiffSaveOptions.transparency","text":"If true, saves the transparency as an additional alpha channel when the file is opened in another application.","title":"transparency()"},{"location":"photoshop/#photoshop.api.save_options.bmp","text":"Options for saving a document in BMO format.","title":"bmp"},{"location":"photoshop/#photoshop.api.save_options.bmp.BMPSaveOptions","text":"Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not.","title":"BMPSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.eps","text":"","title":"eps"},{"location":"photoshop/#photoshop.api.save_options.eps.EPSSaveOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() embedColorProfile ( boolean : bool ) True to embed the color profile in this document. transparentWhites ( value : bool ) True to display white areas as transparent vectorData ( value : bool ) True to include vector data. Valid only if the document includes vector data (text).","title":"EPSSaveOptions"},{"location":"photoshop/#photoshop.api.save_options.pdf","text":"Options for saving a document in Adobe PDF format. using the Document.saveAs() method.","title":"pdf"},{"location":"photoshop/#photoshop.api.save_options.pdf.PDFSaveOptions","text":"Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat.","title":"PDFSaveOptions"},{"location":"photoshop/#photoshop.api.solid_color","text":"A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() .","title":"solid_color"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor","text":"Bases: Photoshop","title":"SolidColor"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor.isEqual","text":"SolidColor object is visually equal to the specified color.","title":"isEqual()"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor.model","text":"The color model.","title":"model()"},{"location":"photoshop/#photoshop.api.solid_color.SolidColor.nearestWebColor","text":"The nearest web color to the current color.","title":"nearestWebColor()"},{"location":"photoshop/#photoshop.session","text":"Provides a public session class for Photoshop api. Usually we only need to manipulate the currently active document of photoshop. So as follows: from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"session"},{"location":"photoshop/#photoshop.session.Session","text":"Session of photoshop. We can control active documents in this Session. Attributes: Name Type Description app photoshop . application . Application","title":"Session"},{"location":"photoshop/#photoshop.session.Session.__init__","text":"Session of Photoshop. Examples: .. code-block:: python from photoshop import Session with Session(\"your/psd/or/psb/file_path.psd\", action=\"open\") as ps: ps.echo(ps.active_document.name) Parameters: Name Type Description Default file_path str The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. required action str Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. required callback Any The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. required auto_close bool Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. required ps_version str Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 required","title":"__init__()"},{"location":"photoshop/#photoshop.session.Session.active_document","text":"Set active document.","title":"active_document()"},{"location":"photoshop/#photoshop.session.Session.alert","text":"Alert message box in photoshop. Parameters: Name Type Description Default text str The text will pop up in photoshop. required","title":"alert()"},{"location":"photoshop/#photoshop.session.Session.close","text":"closing current session.","title":"close()"},{"location":"photoshop/#photoshop.session.Session.echo","text":"Print message.","title":"echo()"},{"location":"photoshop/session/","text":"photoshop.session Provides a public session class for Photoshop api. Usually we only need to manipulate the currently active document of photoshop. So as follows: from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Session Session of photoshop. We can control active documents in this Session. Attributes: Name Type Description app photoshop . application . Application __init__ ( file_path : str , action : str , callback : Any , auto_close : bool , ps_version : str ) Session of Photoshop. Examples: .. code-block:: python from photoshop import Session with Session(\"your/psd/or/psb/file_path.psd\", action=\"open\") as ps: ps.echo(ps.active_document.name) Parameters: Name Type Description Default file_path str The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. required action str Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. required callback Any The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. required auto_close bool Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. required ps_version str Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 required active_document ( active_document ) Set active document. alert ( text : str ) Alert message box in photoshop. Parameters: Name Type Description Default text str The text will pop up in photoshop. required close () closing current session. echo ( * args , ** kwargs ) Print message.","title":"Session"},{"location":"photoshop/session/#photoshop.session","text":"Provides a public session class for Photoshop api. Usually we only need to manipulate the currently active document of photoshop. So as follows: from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"session"},{"location":"photoshop/session/#photoshop.session.Session","text":"Session of photoshop. We can control active documents in this Session. Attributes: Name Type Description app photoshop . application . Application","title":"Session"},{"location":"photoshop/session/#photoshop.session.Session.__init__","text":"Session of Photoshop. Examples: .. code-block:: python from photoshop import Session with Session(\"your/psd/or/psb/file_path.psd\", action=\"open\") as ps: ps.echo(ps.active_document.name) Parameters: Name Type Description Default file_path str The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. required action str Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. required callback Any The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. required auto_close bool Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. required ps_version str Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 required","title":"__init__()"},{"location":"photoshop/session/#photoshop.session.Session.active_document","text":"Set active document.","title":"active_document()"},{"location":"photoshop/session/#photoshop.session.Session.alert","text":"Alert message box in photoshop. Parameters: Name Type Description Default text str The text will pop up in photoshop. required","title":"alert()"},{"location":"photoshop/session/#photoshop.session.Session.close","text":"closing current session.","title":"close()"},{"location":"photoshop/session/#photoshop.session.Session.echo","text":"Print message.","title":"echo()"},{"location":"photoshop/api/","text":"photoshop.api Python API for Photoshop. ActionDescriptor Bases: Photoshop clear () Clears the descriptor. count () The number of keys contained in the descriptor. erase ( key : int ) Erases a key form the descriptor. fromStream ( value : str ) Create a descriptor from a stream of bytes. for reading from disk. getBoolean ( key : int ) -> int Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean. getClass ( key ) Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class. getData ( key : int ) -> int Gets raw byte data as a string value. getDouble ( key : int ) -> int Gets the value of a key of type double. getEnumerationType ( index : int ) -> int Gets the enumeration type of a key. getEnumerationValue ( index : int ) -> int Gets the enumeration value of a key. getInteger ( index : int ) -> int Gets the value of a key of type integer. getKey ( index : int ) -> int Gets the ID of the key provided by index. getLargeInteger ( index : int ) -> int Gets the value of a key of type large integer. getList ( index : int ) -> ActionList Gets the value of a key of type list. getObjectType ( key : int ) -> int Gets the class ID of an object in a key of type object. getObjectValue ( key : int ) -> int Get the class ID of an object in a key of type object. getPath ( key : int ) -> Path Gets the value of a key of type. getReference ( key : int ) -> ActionReference Gets the value of a key of type. getString ( key : int ) -> str Gets the value of a key of type. getType ( key : int ) -> DescValueType Gets the type of a key. getUnitDoubleType ( key : int ) -> int Gets the unit type of a key of type UnitDouble. getUnitDoubleValue ( key : int ) -> int Gets the unit type of a key of type UnitDouble. hasKey ( key : int ) -> bool Checks whether the descriptor contains the provided key. isEqual ( otherDesc ) -> bool Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required putBoolean ( key : int , value : bool ) Sets the value for a key whose type is boolean. putClass ( key : int , value : int ) Sets the value for a key whose type is class. putData ( key : int , value : str ) Puts raw byte data as a string value. putDouble ( key : int , value : int ) Sets the value for a key whose type is double. putEnumerated ( key : int , enum_type : int , value : int ) Sets the enumeration type and value for a key. putInteger ( key : int , value : int ) Sets the value for a key whose type is integer. putLargeInteger ( key : int , value : int ) Sets the value for a key whose type is large integer. putList ( key : int , value : ActionList ) Sets the value for a key whose type is an ActionList object. putObject ( key : int , class_id : int , value ) Sets the value for a key whose type is an object. putPath ( key : int , value : str ) Sets the value for a key whose type is path. putReference ( key : int , value : ActionReference ) Sets the value for a key whose type is an object reference. putString ( key : int , value : str ) Sets the value for a key whose type is string. putUnitDouble ( key : int , unit_id : int , value : int ) Sets the value for a key whose type is a unit value formatted as double. toStream () -> str Gets the entire descriptor as as stream of bytes, for writing to disk. ActionReference Bases: Photoshop getForm () -> ReferenceFormType Gets the form of this action reference. getIdentifier () -> int Gets the identifier value for a reference whose form is identifier. getIndex () -> int Gets the index value for a reference in a list or array, putEnumerated ( desired_class , enum_type , value ) Puts an enumeration type and ID into a reference along with the desired class for the reference. Application Bases: Photoshop backgroundColor ( color ) Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required batch ( * args , ** kwargs ) Runs the batch automation routine. Similar to the File > Automate > Batch command. beep () Causes a \"beep\" sound. build () changeProgressText ( text ) Changes the text that appears in the progress window. colorSettings ( settings ) The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required currentTool ( tool_name ) Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required displayDialogs ( dialog_mode : DialogModes ) The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs. doAction ( action , action_from ) Plays the specified action from the Actions palette. doProgress ( title , javascript ) Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required doProgressTask ( index , javascript ) Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. documents () -> Documents ._documents.Documents: The Documents instance. eraseCustomOptions ( key ) Removes the specified user objects from the Photoshop registry. featureEnabled ( name ) Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial foregroundColor ( color : SolidColor ) Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required freeMemory () -> float The amount of unused memory available to . getCustomOptions ( key ) Retrieves user objects in the Photoshop registry for the ID with value key. load ( document_file_path ) Loads a support document. locale () -> str The language locale of the application. macintoshFileTypes () -> List [ str ] A list of the image file types Photoshop can open. measurementLog () The log of measurements taken. notifiers () The notifiers currently configured (in the Scripts Events Manager menu in the application). parent () The object\u2019s container. path () purge ( target ) Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required refresh () Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method. refreshFonts () Force the font list to get refreshed. runMenuItem ( menu_id ) Run a menu item given the menu ID. showColorPicker () Returns false if dialog is cancelled, true otherwise. togglePalettes () Toggle palette visibility. BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() ExportOptionsSaveForWeb Bases: Photoshop colors ( value ) The number of colors in the palette. GrayColor Bases: Photoshop gray ( value : float ) The gray value. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. SolidColor Bases: Photoshop isEqual ( color : RGBColor ) SolidColor object is visually equal to the specified color. model ( value : ColorModel ) The color model. nearestWebColor () -> RGBColor The nearest web color to the current color. TextItem Bases: Photoshop autoLeadingAmount ( value ) The percentage to use for auto (default) leading (in points). Valid only when useAutoLeading = True. capitalization ( value ) Sets text case. color ( color_value ) The color of textItem. contents ( text : str ) Set the actual text in the layer. Parameters: Name Type Description Default text str The actual text. required convertToShape () Converts the text item and its containing layer to a fill layer with the text changed to a clipping path. createPath () Creates a clipping path from the outlines of the actual text items (such as letters or words). position ( array ) The position of the origin for the text. The array must contain two values. Setting this property is basically equivalent to clicking the text tool at a point in the documents to create the point of origin for text. width ( value : float ) The width of the bounding box for paragraph text. Valid only when kind = TextType.PARAGRAPHTEXT. TiffSaveOptions Bases: Photoshop layerCompression ( value ) The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true. transparency ( value ) If true, saves the transparency as an additional alpha channel when the file is opened in another application. _active_layer ActiveLayer Bases: Photoshop The selected layer. add () Adds an element. name () -> str The name of the layer. _artlayer ArtLayer Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application). adjustBrightnessContrast ( brightness , contrast ) Adjusts the brightness and contrast. Parameters: Name Type Description Default brightness int The brightness amount. Range: -100 to 100. required contrast int The contrast amount. Range: -100 to 100. required adjustColorBalance ( shadows , midtones , highlights , preserveLuminosity ) Adjusts the color balance of the layer\u2019s component channels. Parameters: Name Type Description Default shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required preserveLuminosity If true, luminosity is preserved. required adjustCurves ( curveShape ) Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: Name Type Description Default curveShape The curve points. The number of points must be between 2 and 14. required adjustLevels ( inputRangeStart , inputRangeEnd , inputRangeGamma , outputRangeStart , outputRangeEnd ) Adjusts levels of the selected channels. Parameters: Name Type Description Default inputRangeStart required inputRangeEnd required inputRangeGamma required outputRangeStart required outputRangeEnd required applyAverage () Applies the average filter. applyBlur () Applies the blur filter. applyBlurMore () Applies the blur more filter. applyClouds () Applies the clouds filter. applyCustomFilter ( characteristics , scale , offset ) Applies the custom filter. applyDeInterlace ( eliminateFields , createFields ) Applies the de-interlace filter. applyDifferenceClouds () Applies the difference clouds filter. applyDiffuseGlow ( graininess , amount , clear_amount ) Applies the diffuse glow filter. Parameters: Name Type Description Default graininess The amount of graininess. Range: 0 to 10. required amount The glow amount. Range: 0 to 20. required clear_amount The clear amount. Range: 0 to 20. required applyDisplace ( horizontalScale , verticalScale , displacementType , undefinedAreas , displacementMapFile ) Applies the displace filter. applyDustAndScratches ( radius , threshold ) Applies the dust and scratches filter. applyGaussianBlur ( radius ) Applies the gaussian blur filter. applyHighPass ( radius ) Applies the high pass filter. applyLensBlur ( source , focalDistance , invertDepthMap , shape , radius , bladeCurvature , rotation , brightness , threshold , amount , distribution , monochromatic ) Apply the lens blur filter. fillOpacity ( value ) he interior opacity of the layer. Range: 0.0 to 100.0. kind ( layer_type ) set the layer kind. parent ( value ) Set the object\u2019s container. _core This class provides all photoshop API core functions. Photoshop Bases: object Core API for all photoshop objects. _assemble_program_name ( names : List [ str ]) Assemble program name of Photoshop. Parameters: Name Type Description Default names list of str The name to be assembled. .e.g: [ 'Photoshop', 'ActionDescriptor', '140' ] required Returns: Name Type Description str Assembled name. Examples: Photoshop.ActionDescriptor Photoshop.ActionDescriptor.140 Photoshop.ActionList Photoshop.ActionList.140 Photoshop.ActionReference Photoshop.ActionReference.140 Photoshop.Application Photoshop.Application.140 Photoshop.BatchOptions Photoshop.BatchOptions.140 Photoshop.BitmapConversionOptions Photoshop.BMPSaveOptions Photoshop.BMPSaveOptions.140 Photoshop.CameraRAWOpenOptions Photoshop.CameraRAWOpenOptions.140 get_application_path () get_plugin_path () -> str The absolute plugin path of Photoshop. get_presets_path () -> str The absolute presets path of Photoshop. get_script_path () -> str The absolute scripts path of Photoshop. open_key ( key : str ) -> str Open the register key. Parameters: Name Type Description Default key str The key of register. required Returns: Type Description str The handle to the specified key. typename () -> str Current typename. _document The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method. Document Bases: Photoshop The active containment object for the layers and all other objects in the script; the basic canvas for the file. activeHistoryBrushSource () The history state to use with the history brush. activeHistoryState () The current history state for this document. activeLayer ( layer ) Sets the select layer as active layer. autoCount ( * args , ** kwargs ) Counts the objects in the Document. backgroundLayer () The background layer for the Document. changeMode ( * args , ** kwargs ) Changes the mode of the Document. cloudDocument () This document is in the cloud. cloudWorkAreaDirectory () Local directory for this cloud document. colorSamplers () The current color samplers associated with the Document. componentChannels () The color component channels for this Document. countItems () The current count items in the Document. crop ( bounds , angle , width , height ) Crops the document. Parameters: Name Type Description Default bounds list of int Four coordinates for the region remaining after cropping. required angle float The angle of cropping bounds. required width int The width of the resulting document. required height int The height of the resulting document. required exportDocument ( file_path , exportAs , options ) Exports the Document. flatten () Flattens all layers. fullName () The full path name of the Document. height () The height of the Document. histogram () A histogram showing the number of pixels at each color intensity level for the composite channel. history_states () The history states collection in this Document. id () The unique ID of this Document. info () Metadata about the Document. layerComps () The layer comps collection in this Document. layerSets () The layer sets collection in the Document. layers () The layers collection in the Document. managed () If true, the Document is a workgroup Document. measurement_scale () The measurement scale of the Document. mergeVisibleLayers () Flattens all visible layers in the Document. mode () The color profile. name () -> str The Document name. parent () The object's container. paste () Pastes contents of the clipboard into the Document. pixelAspectRatio () The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000. print () Prints the document. printSettings () Document print settings. quickMaskMode () If true, the document is in Quick Mask mode. recordMeasurements ( source , dataPoints ) Records the measurements of document. resizeImage ( width , height , resolution , automatic ) Changes the size of the image. Parameters: Name Type Description Default width The desired width of the image. required height The desired height of the image. required resolution The resolution (in pixels per inch) required resolution () The resolution of the Document (in pixels per inch) reveal_all () Expands the Document to show clipped sections. save () Saves the Document. saveAs ( file_path , options , asCopy , extensionType ) Saves the documents with the specified save options. Parameters: Name Type Description Default file_path str Absolute path of psd file. required options JPEGSaveOptions Save options. required asCopy bool required saved () If true, the Document been saved since the last change. selection () The selected area of the Document. splitChannels () Splits the channels of the document. suspendHistory ( historyString , javaScriptString ) Provides a single history state for the entire script. Allows a single undo for all actions taken in the script. trap ( width ) Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK. trim ( trim_type , top , left , bottom , right ) Trims the transparent area around the image on the specified sides of the canvas. Parameters: Name Type Description Default trim_type TrimType The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels required top bool If true, trims away the top of the document. required left bool If true, trims away the left of the document. required bottom bool If true, trims away the bottom of the document. required right bool If true, trims away the right of the document. required typename () The class name of the object. xmpMetadata () The XMP properties of the Document. The Camera RAW settings are stored here. _documentinfo Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application. DocumentInfo Bases: Photoshop Metadata about a document object. _notifier The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property Notifier Bases: Photoshop event () The event identifier, a four-character code or a unique string. eventClass () The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects. eventFile () -> Path The path to the file to execute when the event occurs and activates the notifier. remove () Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information. _notifiers The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property. _selection The selected area of the document or layer. Selection Bases: Photoshop contract ( contract_by ) Contracts the selection. expand ( by ) Expands the selection. Parameters: Name Type Description Default by int The amount to expand the selection. required feather ( by ) Feathers the edges of the selection. Parameters: Name Type Description Default by int The amount to feather the edge. required fill ( fill_type : SolidColor , mode : ColorBlendMode , opacity , preserve_transparency ) Fills the selection. grow ( tolerance , anti_alias ) Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: Name Type Description Default tolerance int The tolerance range. Range: 0 to 255. required anti_alias bool If true, anti-aliasing is used. required invert () Inverts the selection. load ( from_channel , combination , inverting ) Loads the selection from the specified channel. makeWorkPath ( tolerance ) Makes this selection item the workpath for this document. resize ( horizontal , vertical , anchor ) Resizes the selected area to the specified dimensions and anchor position. resizeBoundary ( horizontal , vertical , anchor ) Scales the boundary of the selection. rotate ( angle , anchor ) Rotates the object. rotateBoundary ( angle , anchor ) Rotates the boundary of the selection. selectBorder ( width ) Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: Name Type Description Default width int The width of the border selection. required smooth ( radius ) Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels). store ( into , combination ) Saves the selection as a channel. stroke ( strokeColor , width , location , mode , opacity , preserveTransparency ) Strokes the selection. Parameters: Name Type Description Default strokeColor SolidColor The color to stroke the selection with. required width int The stroke width. required location int The stroke location. required mode int The color blend mode. required opacity int The opacity of the stroke color as a percentage. Range: 1 to 100. required preserveTransparency bool If true, preserves transparency. required translate ( deltaX , deltaY ) Moves the object relative to its current position. translateBoundary ( deltaX , deltaY ) Moves the boundary of selection relative to its current position. action_descriptor A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide. ActionDescriptor Bases: Photoshop clear () Clears the descriptor. count () The number of keys contained in the descriptor. erase ( key : int ) Erases a key form the descriptor. fromStream ( value : str ) Create a descriptor from a stream of bytes. for reading from disk. getBoolean ( key : int ) -> int Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean. getClass ( key ) Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class. getData ( key : int ) -> int Gets raw byte data as a string value. getDouble ( key : int ) -> int Gets the value of a key of type double. getEnumerationType ( index : int ) -> int Gets the enumeration type of a key. getEnumerationValue ( index : int ) -> int Gets the enumeration value of a key. getInteger ( index : int ) -> int Gets the value of a key of type integer. getKey ( index : int ) -> int Gets the ID of the key provided by index. getLargeInteger ( index : int ) -> int Gets the value of a key of type large integer. getList ( index : int ) -> ActionList Gets the value of a key of type list. getObjectType ( key : int ) -> int Gets the class ID of an object in a key of type object. getObjectValue ( key : int ) -> int Get the class ID of an object in a key of type object. getPath ( key : int ) -> Path Gets the value of a key of type. getReference ( key : int ) -> ActionReference Gets the value of a key of type. getString ( key : int ) -> str Gets the value of a key of type. getType ( key : int ) -> DescValueType Gets the type of a key. getUnitDoubleType ( key : int ) -> int Gets the unit type of a key of type UnitDouble. getUnitDoubleValue ( key : int ) -> int Gets the unit type of a key of type UnitDouble. hasKey ( key : int ) -> bool Checks whether the descriptor contains the provided key. isEqual ( otherDesc ) -> bool Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required putBoolean ( key : int , value : bool ) Sets the value for a key whose type is boolean. putClass ( key : int , value : int ) Sets the value for a key whose type is class. putData ( key : int , value : str ) Puts raw byte data as a string value. putDouble ( key : int , value : int ) Sets the value for a key whose type is double. putEnumerated ( key : int , enum_type : int , value : int ) Sets the enumeration type and value for a key. putInteger ( key : int , value : int ) Sets the value for a key whose type is integer. putLargeInteger ( key : int , value : int ) Sets the value for a key whose type is large integer. putList ( key : int , value : ActionList ) Sets the value for a key whose type is an ActionList object. putObject ( key : int , class_id : int , value ) Sets the value for a key whose type is an object. putPath ( key : int , value : str ) Sets the value for a key whose type is path. putReference ( key : int , value : ActionReference ) Sets the value for a key whose type is an object reference. putString ( key : int , value : str ) Sets the value for a key whose type is string. putUnitDouble ( key : int , unit_id : int , value : int ) Sets the value for a key whose type is a unit value formatted as double. toStream () -> str Gets the entire descriptor as as stream of bytes, for writing to disk. action_list This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop. action_reference This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor. ActionReference Bases: Photoshop getForm () -> ReferenceFormType Gets the form of this action reference. getIdentifier () -> int Gets the identifier value for a reference whose form is identifier. getIndex () -> int Gets the index value for a reference in a list or array, putEnumerated ( desired_class , enum_type , value ) Puts an enumeration type and ID into a reference along with the desired class for the reference. application The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\") Application Bases: Photoshop backgroundColor ( color ) Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required batch ( * args , ** kwargs ) Runs the batch automation routine. Similar to the File > Automate > Batch command. beep () Causes a \"beep\" sound. build () changeProgressText ( text ) Changes the text that appears in the progress window. colorSettings ( settings ) The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required currentTool ( tool_name ) Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required displayDialogs ( dialog_mode : DialogModes ) The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs. doAction ( action , action_from ) Plays the specified action from the Actions palette. doProgress ( title , javascript ) Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required doProgressTask ( index , javascript ) Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. documents () -> Documents ._documents.Documents: The Documents instance. eraseCustomOptions ( key ) Removes the specified user objects from the Photoshop registry. featureEnabled ( name ) Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial foregroundColor ( color : SolidColor ) Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required freeMemory () -> float The amount of unused memory available to . getCustomOptions ( key ) Retrieves user objects in the Photoshop registry for the ID with value key. load ( document_file_path ) Loads a support document. locale () -> str The language locale of the application. macintoshFileTypes () -> List [ str ] A list of the image file types Photoshop can open. measurementLog () The log of measurements taken. notifiers () The notifiers currently configured (in the Scripts Events Manager menu in the application). parent () The object\u2019s container. path () purge ( target ) Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required refresh () Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method. refreshFonts () Force the font list to get refreshed. runMenuItem ( menu_id ) Run a menu item given the menu ID. showColorPicker () Returns false if dialog is cancelled, true otherwise. togglePalettes () Toggle palette visibility. colors GrayColor Bases: Photoshop gray ( value : float ) The gray value. cmyk Defines a CMYK color, used in the SolidColor object. gray Defines a gray color, used in the SolidColor object. GrayColor Bases: Photoshop gray ( value : float ) The gray value. hsb Defines an HSB color, used in the SolidColor object. enumerations constants type of enum for Photoshop. open_options EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() eps EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() save_options BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. ExportOptionsSaveForWeb Bases: Photoshop colors ( value ) The number of colors in the palette. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. TiffSaveOptions Bases: Photoshop layerCompression ( value ) The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true. transparency ( value ) If true, saves the transparency as an additional alpha channel when the file is opened in another application. bmp Options for saving a document in BMO format. BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. eps EPSSaveOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() embedColorProfile ( boolean : bool ) True to embed the color profile in this document. transparentWhites ( value : bool ) True to display white areas as transparent vectorData ( value : bool ) True to include vector data. Valid only if the document includes vector data (text). pdf Options for saving a document in Adobe PDF format. using the Document.saveAs() method. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. solid_color A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() . SolidColor Bases: Photoshop isEqual ( color : RGBColor ) SolidColor object is visually equal to the specified color. model ( value : ColorModel ) The color model. nearestWebColor () -> RGBColor The nearest web color to the current color.","title":"Index"},{"location":"photoshop/api/#photoshop.api","text":"Python API for Photoshop.","title":"api"},{"location":"photoshop/api/#photoshop.api.ActionDescriptor","text":"Bases: Photoshop","title":"ActionDescriptor"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.clear","text":"Clears the descriptor.","title":"clear()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.count","text":"The number of keys contained in the descriptor.","title":"count()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.erase","text":"Erases a key form the descriptor.","title":"erase()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.fromStream","text":"Create a descriptor from a stream of bytes. for reading from disk.","title":"fromStream()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getBoolean","text":"Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean.","title":"getBoolean()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getClass","text":"Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class.","title":"getClass()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getData","text":"Gets raw byte data as a string value.","title":"getData()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getDouble","text":"Gets the value of a key of type double.","title":"getDouble()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationType","text":"Gets the enumeration type of a key.","title":"getEnumerationType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationValue","text":"Gets the enumeration value of a key.","title":"getEnumerationValue()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getInteger","text":"Gets the value of a key of type integer.","title":"getInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getKey","text":"Gets the ID of the key provided by index.","title":"getKey()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getLargeInteger","text":"Gets the value of a key of type large integer.","title":"getLargeInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getList","text":"Gets the value of a key of type list.","title":"getList()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getObjectType","text":"Gets the class ID of an object in a key of type object.","title":"getObjectType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getObjectValue","text":"Get the class ID of an object in a key of type object.","title":"getObjectValue()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getPath","text":"Gets the value of a key of type.","title":"getPath()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getReference","text":"Gets the value of a key of type.","title":"getReference()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getString","text":"Gets the value of a key of type.","title":"getString()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getType","text":"Gets the type of a key.","title":"getType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleType","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleValue","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleValue()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.hasKey","text":"Checks whether the descriptor contains the provided key.","title":"hasKey()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.isEqual","text":"Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required","title":"isEqual()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putBoolean","text":"Sets the value for a key whose type is boolean.","title":"putBoolean()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putClass","text":"Sets the value for a key whose type is class.","title":"putClass()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putData","text":"Puts raw byte data as a string value.","title":"putData()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putDouble","text":"Sets the value for a key whose type is double.","title":"putDouble()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putEnumerated","text":"Sets the enumeration type and value for a key.","title":"putEnumerated()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putInteger","text":"Sets the value for a key whose type is integer.","title":"putInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putLargeInteger","text":"Sets the value for a key whose type is large integer.","title":"putLargeInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putList","text":"Sets the value for a key whose type is an ActionList object.","title":"putList()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putObject","text":"Sets the value for a key whose type is an object.","title":"putObject()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putPath","text":"Sets the value for a key whose type is path.","title":"putPath()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putReference","text":"Sets the value for a key whose type is an object reference.","title":"putReference()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putString","text":"Sets the value for a key whose type is string.","title":"putString()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putUnitDouble","text":"Sets the value for a key whose type is a unit value formatted as double.","title":"putUnitDouble()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.toStream","text":"Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"toStream()"},{"location":"photoshop/api/#photoshop.api.ActionReference","text":"Bases: Photoshop","title":"ActionReference"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.getForm","text":"Gets the form of this action reference.","title":"getForm()"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.getIdentifier","text":"Gets the identifier value for a reference whose form is identifier.","title":"getIdentifier()"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.getIndex","text":"Gets the index value for a reference in a list or array,","title":"getIndex()"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.putEnumerated","text":"Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"putEnumerated()"},{"location":"photoshop/api/#photoshop.api.Application","text":"Bases: Photoshop","title":"Application"},{"location":"photoshop/api/#photoshop.api.application.Application.backgroundColor","text":"Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"backgroundColor()"},{"location":"photoshop/api/#photoshop.api.application.Application.batch","text":"Runs the batch automation routine. Similar to the File > Automate > Batch command.","title":"batch()"},{"location":"photoshop/api/#photoshop.api.application.Application.beep","text":"Causes a \"beep\" sound.","title":"beep()"},{"location":"photoshop/api/#photoshop.api.application.Application.build","text":"","title":"build()"},{"location":"photoshop/api/#photoshop.api.application.Application.changeProgressText","text":"Changes the text that appears in the progress window.","title":"changeProgressText()"},{"location":"photoshop/api/#photoshop.api.application.Application.colorSettings","text":"The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required","title":"colorSettings()"},{"location":"photoshop/api/#photoshop.api.application.Application.currentTool","text":"Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required","title":"currentTool()"},{"location":"photoshop/api/#photoshop.api.application.Application.displayDialogs","text":"The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.","title":"displayDialogs()"},{"location":"photoshop/api/#photoshop.api.application.Application.doAction","text":"Plays the specified action from the Actions palette.","title":"doAction()"},{"location":"photoshop/api/#photoshop.api.application.Application.doProgress","text":"Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required","title":"doProgress()"},{"location":"photoshop/api/#photoshop.api.application.Application.doProgressTask","text":"Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.","title":"doProgressTask()"},{"location":"photoshop/api/#photoshop.api.application.Application.documents","text":"._documents.Documents: The Documents instance.","title":"documents()"},{"location":"photoshop/api/#photoshop.api.application.Application.eraseCustomOptions","text":"Removes the specified user objects from the Photoshop registry.","title":"eraseCustomOptions()"},{"location":"photoshop/api/#photoshop.api.application.Application.featureEnabled","text":"Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial","title":"featureEnabled()"},{"location":"photoshop/api/#photoshop.api.application.Application.foregroundColor","text":"Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"foregroundColor()"},{"location":"photoshop/api/#photoshop.api.application.Application.freeMemory","text":"The amount of unused memory available to .","title":"freeMemory()"},{"location":"photoshop/api/#photoshop.api.application.Application.getCustomOptions","text":"Retrieves user objects in the Photoshop registry for the ID with value key.","title":"getCustomOptions()"},{"location":"photoshop/api/#photoshop.api.application.Application.load","text":"Loads a support document.","title":"load()"},{"location":"photoshop/api/#photoshop.api.application.Application.locale","text":"The language locale of the application.","title":"locale()"},{"location":"photoshop/api/#photoshop.api.application.Application.macintoshFileTypes","text":"A list of the image file types Photoshop can open.","title":"macintoshFileTypes()"},{"location":"photoshop/api/#photoshop.api.application.Application.measurementLog","text":"The log of measurements taken.","title":"measurementLog()"},{"location":"photoshop/api/#photoshop.api.application.Application.notifiers","text":"The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers()"},{"location":"photoshop/api/#photoshop.api.application.Application.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"photoshop/api/#photoshop.api.application.Application.path","text":"","title":"path()"},{"location":"photoshop/api/#photoshop.api.application.Application.purge","text":"Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required","title":"purge()"},{"location":"photoshop/api/#photoshop.api.application.Application.refresh","text":"Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method.","title":"refresh()"},{"location":"photoshop/api/#photoshop.api.application.Application.refreshFonts","text":"Force the font list to get refreshed.","title":"refreshFonts()"},{"location":"photoshop/api/#photoshop.api.application.Application.runMenuItem","text":"Run a menu item given the menu ID.","title":"runMenuItem()"},{"location":"photoshop/api/#photoshop.api.application.Application.showColorPicker","text":"Returns false if dialog is cancelled, true otherwise.","title":"showColorPicker()"},{"location":"photoshop/api/#photoshop.api.application.Application.togglePalettes","text":"Toggle palette visibility.","title":"togglePalettes()"},{"location":"photoshop/api/#photoshop.api.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/api/#photoshop.api.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/api/#photoshop.api.ExportOptionsSaveForWeb","text":"Bases: Photoshop","title":"ExportOptionsSaveForWeb"},{"location":"photoshop/api/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colors","text":"The number of colors in the palette.","title":"colors()"},{"location":"photoshop/api/#photoshop.api.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/api/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/api/#photoshop.api.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/api/#photoshop.api.SolidColor","text":"Bases: Photoshop","title":"SolidColor"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor.isEqual","text":"SolidColor object is visually equal to the specified color.","title":"isEqual()"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor.model","text":"The color model.","title":"model()"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor.nearestWebColor","text":"The nearest web color to the current color.","title":"nearestWebColor()"},{"location":"photoshop/api/#photoshop.api.TextItem","text":"Bases: Photoshop","title":"TextItem"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.autoLeadingAmount","text":"The percentage to use for auto (default) leading (in points). Valid only when useAutoLeading = True.","title":"autoLeadingAmount()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.capitalization","text":"Sets text case.","title":"capitalization()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.color","text":"The color of textItem.","title":"color()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.contents","text":"Set the actual text in the layer. Parameters: Name Type Description Default text str The actual text. required","title":"contents()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.convertToShape","text":"Converts the text item and its containing layer to a fill layer with the text changed to a clipping path.","title":"convertToShape()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.createPath","text":"Creates a clipping path from the outlines of the actual text items (such as letters or words).","title":"createPath()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.position","text":"The position of the origin for the text. The array must contain two values. Setting this property is basically equivalent to clicking the text tool at a point in the documents to create the point of origin for text.","title":"position()"},{"location":"photoshop/api/#photoshop.api.text_item.TextItem.width","text":"The width of the bounding box for paragraph text. Valid only when kind = TextType.PARAGRAPHTEXT.","title":"width()"},{"location":"photoshop/api/#photoshop.api.TiffSaveOptions","text":"Bases: Photoshop","title":"TiffSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.tif.TiffSaveOptions.layerCompression","text":"The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true.","title":"layerCompression()"},{"location":"photoshop/api/#photoshop.api.save_options.tif.TiffSaveOptions.transparency","text":"If true, saves the transparency as an additional alpha channel when the file is opened in another application.","title":"transparency()"},{"location":"photoshop/api/#photoshop.api._active_layer","text":"","title":"_active_layer"},{"location":"photoshop/api/#photoshop.api._active_layer.ActiveLayer","text":"Bases: Photoshop The selected layer.","title":"ActiveLayer"},{"location":"photoshop/api/#photoshop.api._active_layer.ActiveLayer.add","text":"Adds an element.","title":"add()"},{"location":"photoshop/api/#photoshop.api._active_layer.ActiveLayer.name","text":"The name of the layer.","title":"name()"},{"location":"photoshop/api/#photoshop.api._artlayer","text":"","title":"_artlayer"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer","text":"Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application).","title":"ArtLayer"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.adjustBrightnessContrast","text":"Adjusts the brightness and contrast. Parameters: Name Type Description Default brightness int The brightness amount. Range: -100 to 100. required contrast int The contrast amount. Range: -100 to 100. required","title":"adjustBrightnessContrast()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.adjustColorBalance","text":"Adjusts the color balance of the layer\u2019s component channels. Parameters: Name Type Description Default shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required preserveLuminosity If true, luminosity is preserved. required","title":"adjustColorBalance()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.adjustCurves","text":"Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: Name Type Description Default curveShape The curve points. The number of points must be between 2 and 14. required","title":"adjustCurves()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.adjustLevels","text":"Adjusts levels of the selected channels. Parameters: Name Type Description Default inputRangeStart required inputRangeEnd required inputRangeGamma required outputRangeStart required outputRangeEnd required","title":"adjustLevels()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyAverage","text":"Applies the average filter.","title":"applyAverage()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyBlur","text":"Applies the blur filter.","title":"applyBlur()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyBlurMore","text":"Applies the blur more filter.","title":"applyBlurMore()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyClouds","text":"Applies the clouds filter.","title":"applyClouds()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyCustomFilter","text":"Applies the custom filter.","title":"applyCustomFilter()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyDeInterlace","text":"Applies the de-interlace filter.","title":"applyDeInterlace()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyDifferenceClouds","text":"Applies the difference clouds filter.","title":"applyDifferenceClouds()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyDiffuseGlow","text":"Applies the diffuse glow filter. Parameters: Name Type Description Default graininess The amount of graininess. Range: 0 to 10. required amount The glow amount. Range: 0 to 20. required clear_amount The clear amount. Range: 0 to 20. required","title":"applyDiffuseGlow()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyDisplace","text":"Applies the displace filter.","title":"applyDisplace()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyDustAndScratches","text":"Applies the dust and scratches filter.","title":"applyDustAndScratches()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyGaussianBlur","text":"Applies the gaussian blur filter.","title":"applyGaussianBlur()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyHighPass","text":"Applies the high pass filter.","title":"applyHighPass()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.applyLensBlur","text":"Apply the lens blur filter.","title":"applyLensBlur()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.fillOpacity","text":"he interior opacity of the layer. Range: 0.0 to 100.0.","title":"fillOpacity()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.kind","text":"set the layer kind.","title":"kind()"},{"location":"photoshop/api/#photoshop.api._artlayer.ArtLayer.parent","text":"Set the object\u2019s container.","title":"parent()"},{"location":"photoshop/api/#photoshop.api._core","text":"This class provides all photoshop API core functions.","title":"_core"},{"location":"photoshop/api/#photoshop.api._core.Photoshop","text":"Bases: object Core API for all photoshop objects.","title":"Photoshop"},{"location":"photoshop/api/#photoshop.api._core.Photoshop._assemble_program_name","text":"Assemble program name of Photoshop. Parameters: Name Type Description Default names list of str The name to be assembled. .e.g: [ 'Photoshop', 'ActionDescriptor', '140' ] required Returns: Name Type Description str Assembled name. Examples: Photoshop.ActionDescriptor Photoshop.ActionDescriptor.140 Photoshop.ActionList Photoshop.ActionList.140 Photoshop.ActionReference Photoshop.ActionReference.140 Photoshop.Application Photoshop.Application.140 Photoshop.BatchOptions Photoshop.BatchOptions.140 Photoshop.BitmapConversionOptions Photoshop.BMPSaveOptions Photoshop.BMPSaveOptions.140 Photoshop.CameraRAWOpenOptions Photoshop.CameraRAWOpenOptions.140","title":"_assemble_program_name()"},{"location":"photoshop/api/#photoshop.api._core.Photoshop.get_application_path","text":"","title":"get_application_path()"},{"location":"photoshop/api/#photoshop.api._core.Photoshop.get_plugin_path","text":"The absolute plugin path of Photoshop.","title":"get_plugin_path()"},{"location":"photoshop/api/#photoshop.api._core.Photoshop.get_presets_path","text":"The absolute presets path of Photoshop.","title":"get_presets_path()"},{"location":"photoshop/api/#photoshop.api._core.Photoshop.get_script_path","text":"The absolute scripts path of Photoshop.","title":"get_script_path()"},{"location":"photoshop/api/#photoshop.api._core.Photoshop.open_key","text":"Open the register key. Parameters: Name Type Description Default key str The key of register. required Returns: Type Description str The handle to the specified key.","title":"open_key()"},{"location":"photoshop/api/#photoshop.api._core.Photoshop.typename","text":"Current typename.","title":"typename()"},{"location":"photoshop/api/#photoshop.api._document","text":"The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method.","title":"_document"},{"location":"photoshop/api/#photoshop.api._document.Document","text":"Bases: Photoshop The active containment object for the layers and all other objects in the script; the basic canvas for the file.","title":"Document"},{"location":"photoshop/api/#photoshop.api._document.Document.activeHistoryBrushSource","text":"The history state to use with the history brush.","title":"activeHistoryBrushSource()"},{"location":"photoshop/api/#photoshop.api._document.Document.activeHistoryState","text":"The current history state for this document.","title":"activeHistoryState()"},{"location":"photoshop/api/#photoshop.api._document.Document.activeLayer","text":"Sets the select layer as active layer.","title":"activeLayer()"},{"location":"photoshop/api/#photoshop.api._document.Document.autoCount","text":"Counts the objects in the Document.","title":"autoCount()"},{"location":"photoshop/api/#photoshop.api._document.Document.backgroundLayer","text":"The background layer for the Document.","title":"backgroundLayer()"},{"location":"photoshop/api/#photoshop.api._document.Document.changeMode","text":"Changes the mode of the Document.","title":"changeMode()"},{"location":"photoshop/api/#photoshop.api._document.Document.cloudDocument","text":"This document is in the cloud.","title":"cloudDocument()"},{"location":"photoshop/api/#photoshop.api._document.Document.cloudWorkAreaDirectory","text":"Local directory for this cloud document.","title":"cloudWorkAreaDirectory()"},{"location":"photoshop/api/#photoshop.api._document.Document.colorSamplers","text":"The current color samplers associated with the Document.","title":"colorSamplers()"},{"location":"photoshop/api/#photoshop.api._document.Document.componentChannels","text":"The color component channels for this Document.","title":"componentChannels()"},{"location":"photoshop/api/#photoshop.api._document.Document.countItems","text":"The current count items in the Document.","title":"countItems()"},{"location":"photoshop/api/#photoshop.api._document.Document.crop","text":"Crops the document. Parameters: Name Type Description Default bounds list of int Four coordinates for the region remaining after cropping. required angle float The angle of cropping bounds. required width int The width of the resulting document. required height int The height of the resulting document. required","title":"crop()"},{"location":"photoshop/api/#photoshop.api._document.Document.exportDocument","text":"Exports the Document.","title":"exportDocument()"},{"location":"photoshop/api/#photoshop.api._document.Document.flatten","text":"Flattens all layers.","title":"flatten()"},{"location":"photoshop/api/#photoshop.api._document.Document.fullName","text":"The full path name of the Document.","title":"fullName()"},{"location":"photoshop/api/#photoshop.api._document.Document.height","text":"The height of the Document.","title":"height()"},{"location":"photoshop/api/#photoshop.api._document.Document.histogram","text":"A histogram showing the number of pixels at each color intensity level for the composite channel.","title":"histogram()"},{"location":"photoshop/api/#photoshop.api._document.Document.history_states","text":"The history states collection in this Document.","title":"history_states()"},{"location":"photoshop/api/#photoshop.api._document.Document.id","text":"The unique ID of this Document.","title":"id()"},{"location":"photoshop/api/#photoshop.api._document.Document.info","text":"Metadata about the Document.","title":"info()"},{"location":"photoshop/api/#photoshop.api._document.Document.layerComps","text":"The layer comps collection in this Document.","title":"layerComps()"},{"location":"photoshop/api/#photoshop.api._document.Document.layerSets","text":"The layer sets collection in the Document.","title":"layerSets()"},{"location":"photoshop/api/#photoshop.api._document.Document.layers","text":"The layers collection in the Document.","title":"layers()"},{"location":"photoshop/api/#photoshop.api._document.Document.managed","text":"If true, the Document is a workgroup Document.","title":"managed()"},{"location":"photoshop/api/#photoshop.api._document.Document.measurement_scale","text":"The measurement scale of the Document.","title":"measurement_scale()"},{"location":"photoshop/api/#photoshop.api._document.Document.mergeVisibleLayers","text":"Flattens all visible layers in the Document.","title":"mergeVisibleLayers()"},{"location":"photoshop/api/#photoshop.api._document.Document.mode","text":"The color profile.","title":"mode()"},{"location":"photoshop/api/#photoshop.api._document.Document.name","text":"The Document name.","title":"name()"},{"location":"photoshop/api/#photoshop.api._document.Document.parent","text":"The object's container.","title":"parent()"},{"location":"photoshop/api/#photoshop.api._document.Document.paste","text":"Pastes contents of the clipboard into the Document.","title":"paste()"},{"location":"photoshop/api/#photoshop.api._document.Document.pixelAspectRatio","text":"The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000.","title":"pixelAspectRatio()"},{"location":"photoshop/api/#photoshop.api._document.Document.print","text":"Prints the document.","title":"print()"},{"location":"photoshop/api/#photoshop.api._document.Document.printSettings","text":"Document print settings.","title":"printSettings()"},{"location":"photoshop/api/#photoshop.api._document.Document.quickMaskMode","text":"If true, the document is in Quick Mask mode.","title":"quickMaskMode()"},{"location":"photoshop/api/#photoshop.api._document.Document.recordMeasurements","text":"Records the measurements of document.","title":"recordMeasurements()"},{"location":"photoshop/api/#photoshop.api._document.Document.resizeImage","text":"Changes the size of the image. Parameters: Name Type Description Default width The desired width of the image. required height The desired height of the image. required resolution The resolution (in pixels per inch) required","title":"resizeImage()"},{"location":"photoshop/api/#photoshop.api._document.Document.resolution","text":"The resolution of the Document (in pixels per inch)","title":"resolution()"},{"location":"photoshop/api/#photoshop.api._document.Document.reveal_all","text":"Expands the Document to show clipped sections.","title":"reveal_all()"},{"location":"photoshop/api/#photoshop.api._document.Document.save","text":"Saves the Document.","title":"save()"},{"location":"photoshop/api/#photoshop.api._document.Document.saveAs","text":"Saves the documents with the specified save options. Parameters: Name Type Description Default file_path str Absolute path of psd file. required options JPEGSaveOptions Save options. required asCopy bool required","title":"saveAs()"},{"location":"photoshop/api/#photoshop.api._document.Document.saved","text":"If true, the Document been saved since the last change.","title":"saved()"},{"location":"photoshop/api/#photoshop.api._document.Document.selection","text":"The selected area of the Document.","title":"selection()"},{"location":"photoshop/api/#photoshop.api._document.Document.splitChannels","text":"Splits the channels of the document.","title":"splitChannels()"},{"location":"photoshop/api/#photoshop.api._document.Document.suspendHistory","text":"Provides a single history state for the entire script. Allows a single undo for all actions taken in the script.","title":"suspendHistory()"},{"location":"photoshop/api/#photoshop.api._document.Document.trap","text":"Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK.","title":"trap()"},{"location":"photoshop/api/#photoshop.api._document.Document.trim","text":"Trims the transparent area around the image on the specified sides of the canvas. Parameters: Name Type Description Default trim_type TrimType The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels required top bool If true, trims away the top of the document. required left bool If true, trims away the left of the document. required bottom bool If true, trims away the bottom of the document. required right bool If true, trims away the right of the document. required","title":"trim()"},{"location":"photoshop/api/#photoshop.api._document.Document.typename","text":"The class name of the object.","title":"typename()"},{"location":"photoshop/api/#photoshop.api._document.Document.xmpMetadata","text":"The XMP properties of the Document. The Camera RAW settings are stored here.","title":"xmpMetadata()"},{"location":"photoshop/api/#photoshop.api._documentinfo","text":"Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application.","title":"_documentinfo"},{"location":"photoshop/api/#photoshop.api._documentinfo.DocumentInfo","text":"Bases: Photoshop Metadata about a document object.","title":"DocumentInfo"},{"location":"photoshop/api/#photoshop.api._notifier","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property","title":"_notifier"},{"location":"photoshop/api/#photoshop.api._notifier.Notifier","text":"Bases: Photoshop","title":"Notifier"},{"location":"photoshop/api/#photoshop.api._notifier.Notifier.event","text":"The event identifier, a four-character code or a unique string.","title":"event()"},{"location":"photoshop/api/#photoshop.api._notifier.Notifier.eventClass","text":"The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects.","title":"eventClass()"},{"location":"photoshop/api/#photoshop.api._notifier.Notifier.eventFile","text":"The path to the file to execute when the event occurs and activates the notifier.","title":"eventFile()"},{"location":"photoshop/api/#photoshop.api._notifier.Notifier.remove","text":"Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information.","title":"remove()"},{"location":"photoshop/api/#photoshop.api._notifiers","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property.","title":"_notifiers"},{"location":"photoshop/api/#photoshop.api._selection","text":"The selected area of the document or layer.","title":"_selection"},{"location":"photoshop/api/#photoshop.api._selection.Selection","text":"Bases: Photoshop","title":"Selection"},{"location":"photoshop/api/#photoshop.api._selection.Selection.contract","text":"Contracts the selection.","title":"contract()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.expand","text":"Expands the selection. Parameters: Name Type Description Default by int The amount to expand the selection. required","title":"expand()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.feather","text":"Feathers the edges of the selection. Parameters: Name Type Description Default by int The amount to feather the edge. required","title":"feather()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.fill","text":"Fills the selection.","title":"fill()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.grow","text":"Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: Name Type Description Default tolerance int The tolerance range. Range: 0 to 255. required anti_alias bool If true, anti-aliasing is used. required","title":"grow()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.invert","text":"Inverts the selection.","title":"invert()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.load","text":"Loads the selection from the specified channel.","title":"load()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.makeWorkPath","text":"Makes this selection item the workpath for this document.","title":"makeWorkPath()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.resize","text":"Resizes the selected area to the specified dimensions and anchor position.","title":"resize()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.resizeBoundary","text":"Scales the boundary of the selection.","title":"resizeBoundary()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.rotate","text":"Rotates the object.","title":"rotate()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.rotateBoundary","text":"Rotates the boundary of the selection.","title":"rotateBoundary()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.selectBorder","text":"Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: Name Type Description Default width int The width of the border selection. required","title":"selectBorder()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.smooth","text":"Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels).","title":"smooth()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.store","text":"Saves the selection as a channel.","title":"store()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.stroke","text":"Strokes the selection. Parameters: Name Type Description Default strokeColor SolidColor The color to stroke the selection with. required width int The stroke width. required location int The stroke location. required mode int The color blend mode. required opacity int The opacity of the stroke color as a percentage. Range: 1 to 100. required preserveTransparency bool If true, preserves transparency. required","title":"stroke()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.translate","text":"Moves the object relative to its current position.","title":"translate()"},{"location":"photoshop/api/#photoshop.api._selection.Selection.translateBoundary","text":"Moves the boundary of selection relative to its current position.","title":"translateBoundary()"},{"location":"photoshop/api/#photoshop.api.action_descriptor","text":"A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide.","title":"action_descriptor"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor","text":"Bases: Photoshop","title":"ActionDescriptor"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.clear","text":"Clears the descriptor.","title":"clear()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.count","text":"The number of keys contained in the descriptor.","title":"count()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.erase","text":"Erases a key form the descriptor.","title":"erase()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.fromStream","text":"Create a descriptor from a stream of bytes. for reading from disk.","title":"fromStream()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getBoolean","text":"Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean.","title":"getBoolean()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getClass","text":"Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class.","title":"getClass()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getData","text":"Gets raw byte data as a string value.","title":"getData()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getDouble","text":"Gets the value of a key of type double.","title":"getDouble()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationType","text":"Gets the enumeration type of a key.","title":"getEnumerationType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationValue","text":"Gets the enumeration value of a key.","title":"getEnumerationValue()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getInteger","text":"Gets the value of a key of type integer.","title":"getInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getKey","text":"Gets the ID of the key provided by index.","title":"getKey()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getLargeInteger","text":"Gets the value of a key of type large integer.","title":"getLargeInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getList","text":"Gets the value of a key of type list.","title":"getList()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getObjectType","text":"Gets the class ID of an object in a key of type object.","title":"getObjectType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getObjectValue","text":"Get the class ID of an object in a key of type object.","title":"getObjectValue()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getPath","text":"Gets the value of a key of type.","title":"getPath()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getReference","text":"Gets the value of a key of type.","title":"getReference()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getString","text":"Gets the value of a key of type.","title":"getString()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getType","text":"Gets the type of a key.","title":"getType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleType","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleType()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleValue","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleValue()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.hasKey","text":"Checks whether the descriptor contains the provided key.","title":"hasKey()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.isEqual","text":"Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required","title":"isEqual()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putBoolean","text":"Sets the value for a key whose type is boolean.","title":"putBoolean()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putClass","text":"Sets the value for a key whose type is class.","title":"putClass()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putData","text":"Puts raw byte data as a string value.","title":"putData()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putDouble","text":"Sets the value for a key whose type is double.","title":"putDouble()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putEnumerated","text":"Sets the enumeration type and value for a key.","title":"putEnumerated()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putInteger","text":"Sets the value for a key whose type is integer.","title":"putInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putLargeInteger","text":"Sets the value for a key whose type is large integer.","title":"putLargeInteger()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putList","text":"Sets the value for a key whose type is an ActionList object.","title":"putList()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putObject","text":"Sets the value for a key whose type is an object.","title":"putObject()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putPath","text":"Sets the value for a key whose type is path.","title":"putPath()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putReference","text":"Sets the value for a key whose type is an object reference.","title":"putReference()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putString","text":"Sets the value for a key whose type is string.","title":"putString()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.putUnitDouble","text":"Sets the value for a key whose type is a unit value formatted as double.","title":"putUnitDouble()"},{"location":"photoshop/api/#photoshop.api.action_descriptor.ActionDescriptor.toStream","text":"Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"toStream()"},{"location":"photoshop/api/#photoshop.api.action_list","text":"This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop.","title":"action_list"},{"location":"photoshop/api/#photoshop.api.action_reference","text":"This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor.","title":"action_reference"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference","text":"Bases: Photoshop","title":"ActionReference"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.getForm","text":"Gets the form of this action reference.","title":"getForm()"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.getIdentifier","text":"Gets the identifier value for a reference whose form is identifier.","title":"getIdentifier()"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.getIndex","text":"Gets the index value for a reference in a list or array,","title":"getIndex()"},{"location":"photoshop/api/#photoshop.api.action_reference.ActionReference.putEnumerated","text":"Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"putEnumerated()"},{"location":"photoshop/api/#photoshop.api.application","text":"The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\")","title":"application"},{"location":"photoshop/api/#photoshop.api.application.Application","text":"Bases: Photoshop","title":"Application"},{"location":"photoshop/api/#photoshop.api.application.Application.backgroundColor","text":"Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"backgroundColor()"},{"location":"photoshop/api/#photoshop.api.application.Application.batch","text":"Runs the batch automation routine. Similar to the File > Automate > Batch command.","title":"batch()"},{"location":"photoshop/api/#photoshop.api.application.Application.beep","text":"Causes a \"beep\" sound.","title":"beep()"},{"location":"photoshop/api/#photoshop.api.application.Application.build","text":"","title":"build()"},{"location":"photoshop/api/#photoshop.api.application.Application.changeProgressText","text":"Changes the text that appears in the progress window.","title":"changeProgressText()"},{"location":"photoshop/api/#photoshop.api.application.Application.colorSettings","text":"The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required","title":"colorSettings()"},{"location":"photoshop/api/#photoshop.api.application.Application.currentTool","text":"Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required","title":"currentTool()"},{"location":"photoshop/api/#photoshop.api.application.Application.displayDialogs","text":"The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.","title":"displayDialogs()"},{"location":"photoshop/api/#photoshop.api.application.Application.doAction","text":"Plays the specified action from the Actions palette.","title":"doAction()"},{"location":"photoshop/api/#photoshop.api.application.Application.doProgress","text":"Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required","title":"doProgress()"},{"location":"photoshop/api/#photoshop.api.application.Application.doProgressTask","text":"Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.","title":"doProgressTask()"},{"location":"photoshop/api/#photoshop.api.application.Application.documents","text":"._documents.Documents: The Documents instance.","title":"documents()"},{"location":"photoshop/api/#photoshop.api.application.Application.eraseCustomOptions","text":"Removes the specified user objects from the Photoshop registry.","title":"eraseCustomOptions()"},{"location":"photoshop/api/#photoshop.api.application.Application.featureEnabled","text":"Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial","title":"featureEnabled()"},{"location":"photoshop/api/#photoshop.api.application.Application.foregroundColor","text":"Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"foregroundColor()"},{"location":"photoshop/api/#photoshop.api.application.Application.freeMemory","text":"The amount of unused memory available to .","title":"freeMemory()"},{"location":"photoshop/api/#photoshop.api.application.Application.getCustomOptions","text":"Retrieves user objects in the Photoshop registry for the ID with value key.","title":"getCustomOptions()"},{"location":"photoshop/api/#photoshop.api.application.Application.load","text":"Loads a support document.","title":"load()"},{"location":"photoshop/api/#photoshop.api.application.Application.locale","text":"The language locale of the application.","title":"locale()"},{"location":"photoshop/api/#photoshop.api.application.Application.macintoshFileTypes","text":"A list of the image file types Photoshop can open.","title":"macintoshFileTypes()"},{"location":"photoshop/api/#photoshop.api.application.Application.measurementLog","text":"The log of measurements taken.","title":"measurementLog()"},{"location":"photoshop/api/#photoshop.api.application.Application.notifiers","text":"The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers()"},{"location":"photoshop/api/#photoshop.api.application.Application.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"photoshop/api/#photoshop.api.application.Application.path","text":"","title":"path()"},{"location":"photoshop/api/#photoshop.api.application.Application.purge","text":"Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required","title":"purge()"},{"location":"photoshop/api/#photoshop.api.application.Application.refresh","text":"Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method.","title":"refresh()"},{"location":"photoshop/api/#photoshop.api.application.Application.refreshFonts","text":"Force the font list to get refreshed.","title":"refreshFonts()"},{"location":"photoshop/api/#photoshop.api.application.Application.runMenuItem","text":"Run a menu item given the menu ID.","title":"runMenuItem()"},{"location":"photoshop/api/#photoshop.api.application.Application.showColorPicker","text":"Returns false if dialog is cancelled, true otherwise.","title":"showColorPicker()"},{"location":"photoshop/api/#photoshop.api.application.Application.togglePalettes","text":"Toggle palette visibility.","title":"togglePalettes()"},{"location":"photoshop/api/#photoshop.api.colors","text":"","title":"colors"},{"location":"photoshop/api/#photoshop.api.colors.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/api/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/api/#photoshop.api.colors.cmyk","text":"Defines a CMYK color, used in the SolidColor object.","title":"cmyk"},{"location":"photoshop/api/#photoshop.api.colors.gray","text":"Defines a gray color, used in the SolidColor object.","title":"gray"},{"location":"photoshop/api/#photoshop.api.colors.gray.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/api/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/api/#photoshop.api.colors.hsb","text":"Defines an HSB color, used in the SolidColor object.","title":"hsb"},{"location":"photoshop/api/#photoshop.api.enumerations","text":"constants type of enum for Photoshop.","title":"enumerations"},{"location":"photoshop/api/#photoshop.api.open_options","text":"","title":"open_options"},{"location":"photoshop/api/#photoshop.api.open_options.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/api/#photoshop.api.open_options.eps","text":"","title":"eps"},{"location":"photoshop/api/#photoshop.api.open_options.eps.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/api/#photoshop.api.save_options","text":"","title":"save_options"},{"location":"photoshop/api/#photoshop.api.save_options.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/api/#photoshop.api.save_options.ExportOptionsSaveForWeb","text":"Bases: Photoshop","title":"ExportOptionsSaveForWeb"},{"location":"photoshop/api/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colors","text":"The number of colors in the palette.","title":"colors()"},{"location":"photoshop/api/#photoshop.api.save_options.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/api/#photoshop.api.save_options.TiffSaveOptions","text":"Bases: Photoshop","title":"TiffSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.tif.TiffSaveOptions.layerCompression","text":"The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true.","title":"layerCompression()"},{"location":"photoshop/api/#photoshop.api.save_options.tif.TiffSaveOptions.transparency","text":"If true, saves the transparency as an additional alpha channel when the file is opened in another application.","title":"transparency()"},{"location":"photoshop/api/#photoshop.api.save_options.bmp","text":"Options for saving a document in BMO format.","title":"bmp"},{"location":"photoshop/api/#photoshop.api.save_options.bmp.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/api/#photoshop.api.save_options.eps","text":"","title":"eps"},{"location":"photoshop/api/#photoshop.api.save_options.eps.EPSSaveOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.eps.EPSSaveOptions.embedColorProfile","text":"True to embed the color profile in this document.","title":"embedColorProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.eps.EPSSaveOptions.transparentWhites","text":"True to display white areas as transparent","title":"transparentWhites()"},{"location":"photoshop/api/#photoshop.api.save_options.eps.EPSSaveOptions.vectorData","text":"True to include vector data. Valid only if the document includes vector data (text).","title":"vectorData()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf","text":"Options for saving a document in Adobe PDF format. using the Document.saveAs() method.","title":"pdf"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/api/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/api/#photoshop.api.solid_color","text":"A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() .","title":"solid_color"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor","text":"Bases: Photoshop","title":"SolidColor"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor.isEqual","text":"SolidColor object is visually equal to the specified color.","title":"isEqual()"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor.model","text":"The color model.","title":"model()"},{"location":"photoshop/api/#photoshop.api.solid_color.SolidColor.nearestWebColor","text":"The nearest web color to the current color.","title":"nearestWebColor()"},{"location":"photoshop/api/_active_layer/","text":"photoshop.api._active_layer ActiveLayer Bases: Photoshop The selected layer. add () Adds an element. name () -> str The name of the layer.","title":" active layer"},{"location":"photoshop/api/_active_layer/#photoshop.api._active_layer","text":"","title":"_active_layer"},{"location":"photoshop/api/_active_layer/#photoshop.api._active_layer.ActiveLayer","text":"Bases: Photoshop The selected layer.","title":"ActiveLayer"},{"location":"photoshop/api/_active_layer/#photoshop.api._active_layer.ActiveLayer.add","text":"Adds an element.","title":"add()"},{"location":"photoshop/api/_active_layer/#photoshop.api._active_layer.ActiveLayer.name","text":"The name of the layer.","title":"name()"},{"location":"photoshop/api/_artlayer/","text":"photoshop.api._artlayer ArtLayer Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application). adjustBrightnessContrast ( brightness , contrast ) Adjusts the brightness and contrast. Parameters: Name Type Description Default brightness int The brightness amount. Range: -100 to 100. required contrast int The contrast amount. Range: -100 to 100. required adjustColorBalance ( shadows , midtones , highlights , preserveLuminosity ) Adjusts the color balance of the layer\u2019s component channels. Parameters: Name Type Description Default shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required preserveLuminosity If true, luminosity is preserved. required adjustCurves ( curveShape ) Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: Name Type Description Default curveShape The curve points. The number of points must be between 2 and 14. required adjustLevels ( inputRangeStart , inputRangeEnd , inputRangeGamma , outputRangeStart , outputRangeEnd ) Adjusts levels of the selected channels. Parameters: Name Type Description Default inputRangeStart required inputRangeEnd required inputRangeGamma required outputRangeStart required outputRangeEnd required applyAverage () Applies the average filter. applyBlur () Applies the blur filter. applyBlurMore () Applies the blur more filter. applyClouds () Applies the clouds filter. applyCustomFilter ( characteristics , scale , offset ) Applies the custom filter. applyDeInterlace ( eliminateFields , createFields ) Applies the de-interlace filter. applyDifferenceClouds () Applies the difference clouds filter. applyDiffuseGlow ( graininess , amount , clear_amount ) Applies the diffuse glow filter. Parameters: Name Type Description Default graininess The amount of graininess. Range: 0 to 10. required amount The glow amount. Range: 0 to 20. required clear_amount The clear amount. Range: 0 to 20. required applyDisplace ( horizontalScale , verticalScale , displacementType , undefinedAreas , displacementMapFile ) Applies the displace filter. applyDustAndScratches ( radius , threshold ) Applies the dust and scratches filter. applyGaussianBlur ( radius ) Applies the gaussian blur filter. applyHighPass ( radius ) Applies the high pass filter. applyLensBlur ( source , focalDistance , invertDepthMap , shape , radius , bladeCurvature , rotation , brightness , threshold , amount , distribution , monochromatic ) Apply the lens blur filter. fillOpacity ( value ) he interior opacity of the layer. Range: 0.0 to 100.0. kind ( layer_type ) set the layer kind. parent ( value ) Set the object\u2019s container.","title":" artlayer"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer","text":"","title":"_artlayer"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer","text":"Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application).","title":"ArtLayer"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustBrightnessContrast","text":"Adjusts the brightness and contrast. Parameters: Name Type Description Default brightness int The brightness amount. Range: -100 to 100. required contrast int The contrast amount. Range: -100 to 100. required","title":"adjustBrightnessContrast()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustColorBalance","text":"Adjusts the color balance of the layer\u2019s component channels. Parameters: Name Type Description Default shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. required preserveLuminosity If true, luminosity is preserved. required","title":"adjustColorBalance()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustCurves","text":"Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: Name Type Description Default curveShape The curve points. The number of points must be between 2 and 14. required","title":"adjustCurves()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustLevels","text":"Adjusts levels of the selected channels. Parameters: Name Type Description Default inputRangeStart required inputRangeEnd required inputRangeGamma required outputRangeStart required outputRangeEnd required","title":"adjustLevels()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyAverage","text":"Applies the average filter.","title":"applyAverage()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyBlur","text":"Applies the blur filter.","title":"applyBlur()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyBlurMore","text":"Applies the blur more filter.","title":"applyBlurMore()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyClouds","text":"Applies the clouds filter.","title":"applyClouds()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyCustomFilter","text":"Applies the custom filter.","title":"applyCustomFilter()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDeInterlace","text":"Applies the de-interlace filter.","title":"applyDeInterlace()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDifferenceClouds","text":"Applies the difference clouds filter.","title":"applyDifferenceClouds()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDiffuseGlow","text":"Applies the diffuse glow filter. Parameters: Name Type Description Default graininess The amount of graininess. Range: 0 to 10. required amount The glow amount. Range: 0 to 20. required clear_amount The clear amount. Range: 0 to 20. required","title":"applyDiffuseGlow()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDisplace","text":"Applies the displace filter.","title":"applyDisplace()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDustAndScratches","text":"Applies the dust and scratches filter.","title":"applyDustAndScratches()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyGaussianBlur","text":"Applies the gaussian blur filter.","title":"applyGaussianBlur()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyHighPass","text":"Applies the high pass filter.","title":"applyHighPass()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyLensBlur","text":"Apply the lens blur filter.","title":"applyLensBlur()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.fillOpacity","text":"he interior opacity of the layer. Range: 0.0 to 100.0.","title":"fillOpacity()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.kind","text":"set the layer kind.","title":"kind()"},{"location":"photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.parent","text":"Set the object\u2019s container.","title":"parent()"},{"location":"photoshop/api/_artlayers/","text":"","title":" artlayers"},{"location":"photoshop/api/_channel/","text":"","title":" channel"},{"location":"photoshop/api/_channels/","text":"","title":" channels"},{"location":"photoshop/api/_core/","text":"photoshop.api._core This class provides all photoshop API core functions. Photoshop Bases: object Core API for all photoshop objects. _assemble_program_name ( names : List [ str ]) Assemble program name of Photoshop. Parameters: Name Type Description Default names list of str The name to be assembled. .e.g: [ 'Photoshop', 'ActionDescriptor', '140' ] required Returns: Name Type Description str Assembled name. Examples: Photoshop.ActionDescriptor Photoshop.ActionDescriptor.140 Photoshop.ActionList Photoshop.ActionList.140 Photoshop.ActionReference Photoshop.ActionReference.140 Photoshop.Application Photoshop.Application.140 Photoshop.BatchOptions Photoshop.BatchOptions.140 Photoshop.BitmapConversionOptions Photoshop.BMPSaveOptions Photoshop.BMPSaveOptions.140 Photoshop.CameraRAWOpenOptions Photoshop.CameraRAWOpenOptions.140 get_application_path () get_plugin_path () -> str The absolute plugin path of Photoshop. get_presets_path () -> str The absolute presets path of Photoshop. get_script_path () -> str The absolute scripts path of Photoshop. open_key ( key : str ) -> str Open the register key. Parameters: Name Type Description Default key str The key of register. required Returns: Type Description str The handle to the specified key. typename () -> str Current typename.","title":" core"},{"location":"photoshop/api/_core/#photoshop.api._core","text":"This class provides all photoshop API core functions.","title":"_core"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop","text":"Bases: object Core API for all photoshop objects.","title":"Photoshop"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop._assemble_program_name","text":"Assemble program name of Photoshop. Parameters: Name Type Description Default names list of str The name to be assembled. .e.g: [ 'Photoshop', 'ActionDescriptor', '140' ] required Returns: Name Type Description str Assembled name. Examples: Photoshop.ActionDescriptor Photoshop.ActionDescriptor.140 Photoshop.ActionList Photoshop.ActionList.140 Photoshop.ActionReference Photoshop.ActionReference.140 Photoshop.Application Photoshop.Application.140 Photoshop.BatchOptions Photoshop.BatchOptions.140 Photoshop.BitmapConversionOptions Photoshop.BMPSaveOptions Photoshop.BMPSaveOptions.140 Photoshop.CameraRAWOpenOptions Photoshop.CameraRAWOpenOptions.140","title":"_assemble_program_name()"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop.get_application_path","text":"","title":"get_application_path()"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop.get_plugin_path","text":"The absolute plugin path of Photoshop.","title":"get_plugin_path()"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop.get_presets_path","text":"The absolute presets path of Photoshop.","title":"get_presets_path()"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop.get_script_path","text":"The absolute scripts path of Photoshop.","title":"get_script_path()"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop.open_key","text":"Open the register key. Parameters: Name Type Description Default key str The key of register. required Returns: Type Description str The handle to the specified key.","title":"open_key()"},{"location":"photoshop/api/_core/#photoshop.api._core.Photoshop.typename","text":"Current typename.","title":"typename()"},{"location":"photoshop/api/_document/","text":"photoshop.api._document The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method. Document Bases: Photoshop The active containment object for the layers and all other objects in the script; the basic canvas for the file. activeHistoryBrushSource () The history state to use with the history brush. activeHistoryState () The current history state for this document. activeLayer ( layer ) Sets the select layer as active layer. autoCount ( * args , ** kwargs ) Counts the objects in the Document. backgroundLayer () The background layer for the Document. changeMode ( * args , ** kwargs ) Changes the mode of the Document. cloudDocument () This document is in the cloud. cloudWorkAreaDirectory () Local directory for this cloud document. colorSamplers () The current color samplers associated with the Document. componentChannels () The color component channels for this Document. countItems () The current count items in the Document. crop ( bounds , angle , width , height ) Crops the document. Parameters: Name Type Description Default bounds list of int Four coordinates for the region remaining after cropping. required angle float The angle of cropping bounds. required width int The width of the resulting document. required height int The height of the resulting document. required exportDocument ( file_path , exportAs , options ) Exports the Document. flatten () Flattens all layers. fullName () The full path name of the Document. height () The height of the Document. histogram () A histogram showing the number of pixels at each color intensity level for the composite channel. history_states () The history states collection in this Document. id () The unique ID of this Document. info () Metadata about the Document. layerComps () The layer comps collection in this Document. layerSets () The layer sets collection in the Document. layers () The layers collection in the Document. managed () If true, the Document is a workgroup Document. measurement_scale () The measurement scale of the Document. mergeVisibleLayers () Flattens all visible layers in the Document. mode () The color profile. name () -> str The Document name. parent () The object's container. paste () Pastes contents of the clipboard into the Document. pixelAspectRatio () The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000. print () Prints the document. printSettings () Document print settings. quickMaskMode () If true, the document is in Quick Mask mode. recordMeasurements ( source , dataPoints ) Records the measurements of document. resizeImage ( width , height , resolution , automatic ) Changes the size of the image. Parameters: Name Type Description Default width The desired width of the image. required height The desired height of the image. required resolution The resolution (in pixels per inch) required resolution () The resolution of the Document (in pixels per inch) reveal_all () Expands the Document to show clipped sections. save () Saves the Document. saveAs ( file_path , options , asCopy , extensionType ) Saves the documents with the specified save options. Parameters: Name Type Description Default file_path str Absolute path of psd file. required options JPEGSaveOptions Save options. required asCopy bool required saved () If true, the Document been saved since the last change. selection () The selected area of the Document. splitChannels () Splits the channels of the document. suspendHistory ( historyString , javaScriptString ) Provides a single history state for the entire script. Allows a single undo for all actions taken in the script. trap ( width ) Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK. trim ( trim_type , top , left , bottom , right ) Trims the transparent area around the image on the specified sides of the canvas. Parameters: Name Type Description Default trim_type TrimType The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels required top bool If true, trims away the top of the document. required left bool If true, trims away the left of the document. required bottom bool If true, trims away the bottom of the document. required right bool If true, trims away the right of the document. required typename () The class name of the object. xmpMetadata () The XMP properties of the Document. The Camera RAW settings are stored here.","title":" document"},{"location":"photoshop/api/_document/#photoshop.api._document","text":"The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method.","title":"_document"},{"location":"photoshop/api/_document/#photoshop.api._document.Document","text":"Bases: Photoshop The active containment object for the layers and all other objects in the script; the basic canvas for the file.","title":"Document"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.activeHistoryBrushSource","text":"The history state to use with the history brush.","title":"activeHistoryBrushSource()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.activeHistoryState","text":"The current history state for this document.","title":"activeHistoryState()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.activeLayer","text":"Sets the select layer as active layer.","title":"activeLayer()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.autoCount","text":"Counts the objects in the Document.","title":"autoCount()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.backgroundLayer","text":"The background layer for the Document.","title":"backgroundLayer()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.changeMode","text":"Changes the mode of the Document.","title":"changeMode()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.cloudDocument","text":"This document is in the cloud.","title":"cloudDocument()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.cloudWorkAreaDirectory","text":"Local directory for this cloud document.","title":"cloudWorkAreaDirectory()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.colorSamplers","text":"The current color samplers associated with the Document.","title":"colorSamplers()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.componentChannels","text":"The color component channels for this Document.","title":"componentChannels()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.countItems","text":"The current count items in the Document.","title":"countItems()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.crop","text":"Crops the document. Parameters: Name Type Description Default bounds list of int Four coordinates for the region remaining after cropping. required angle float The angle of cropping bounds. required width int The width of the resulting document. required height int The height of the resulting document. required","title":"crop()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.exportDocument","text":"Exports the Document.","title":"exportDocument()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.flatten","text":"Flattens all layers.","title":"flatten()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.fullName","text":"The full path name of the Document.","title":"fullName()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.height","text":"The height of the Document.","title":"height()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.histogram","text":"A histogram showing the number of pixels at each color intensity level for the composite channel.","title":"histogram()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.history_states","text":"The history states collection in this Document.","title":"history_states()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.id","text":"The unique ID of this Document.","title":"id()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.info","text":"Metadata about the Document.","title":"info()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.layerComps","text":"The layer comps collection in this Document.","title":"layerComps()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.layerSets","text":"The layer sets collection in the Document.","title":"layerSets()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.layers","text":"The layers collection in the Document.","title":"layers()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.managed","text":"If true, the Document is a workgroup Document.","title":"managed()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.measurement_scale","text":"The measurement scale of the Document.","title":"measurement_scale()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.mergeVisibleLayers","text":"Flattens all visible layers in the Document.","title":"mergeVisibleLayers()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.mode","text":"The color profile.","title":"mode()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.name","text":"The Document name.","title":"name()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.parent","text":"The object's container.","title":"parent()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.paste","text":"Pastes contents of the clipboard into the Document.","title":"paste()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.pixelAspectRatio","text":"The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000.","title":"pixelAspectRatio()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.print","text":"Prints the document.","title":"print()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.printSettings","text":"Document print settings.","title":"printSettings()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.quickMaskMode","text":"If true, the document is in Quick Mask mode.","title":"quickMaskMode()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.recordMeasurements","text":"Records the measurements of document.","title":"recordMeasurements()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.resizeImage","text":"Changes the size of the image. Parameters: Name Type Description Default width The desired width of the image. required height The desired height of the image. required resolution The resolution (in pixels per inch) required","title":"resizeImage()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.resolution","text":"The resolution of the Document (in pixels per inch)","title":"resolution()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.reveal_all","text":"Expands the Document to show clipped sections.","title":"reveal_all()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.save","text":"Saves the Document.","title":"save()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.saveAs","text":"Saves the documents with the specified save options. Parameters: Name Type Description Default file_path str Absolute path of psd file. required options JPEGSaveOptions Save options. required asCopy bool required","title":"saveAs()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.saved","text":"If true, the Document been saved since the last change.","title":"saved()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.selection","text":"The selected area of the Document.","title":"selection()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.splitChannels","text":"Splits the channels of the document.","title":"splitChannels()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.suspendHistory","text":"Provides a single history state for the entire script. Allows a single undo for all actions taken in the script.","title":"suspendHistory()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.trap","text":"Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK.","title":"trap()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.trim","text":"Trims the transparent area around the image on the specified sides of the canvas. Parameters: Name Type Description Default trim_type TrimType The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels required top bool If true, trims away the top of the document. required left bool If true, trims away the left of the document. required bottom bool If true, trims away the bottom of the document. required right bool If true, trims away the right of the document. required","title":"trim()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.typename","text":"The class name of the object.","title":"typename()"},{"location":"photoshop/api/_document/#photoshop.api._document.Document.xmpMetadata","text":"The XMP properties of the Document. The Camera RAW settings are stored here.","title":"xmpMetadata()"},{"location":"photoshop/api/_documentinfo/","text":"photoshop.api._documentinfo Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application. DocumentInfo Bases: Photoshop Metadata about a document object.","title":" documentinfo"},{"location":"photoshop/api/_documentinfo/#photoshop.api._documentinfo","text":"Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application.","title":"_documentinfo"},{"location":"photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo","text":"Bases: Photoshop Metadata about a document object.","title":"DocumentInfo"},{"location":"photoshop/api/_documents/","text":"","title":" documents"},{"location":"photoshop/api/_layerComp/","text":"","title":" layerComp"},{"location":"photoshop/api/_layerComps/","text":"","title":" layerComps"},{"location":"photoshop/api/_layerSet/","text":"","title":" layerSet"},{"location":"photoshop/api/_layerSets/","text":"","title":" layerSets"},{"location":"photoshop/api/_layers/","text":"","title":" layers"},{"location":"photoshop/api/_measurement_log/","text":"","title":" measurement log"},{"location":"photoshop/api/_notifier/","text":"photoshop.api._notifier The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property Notifier Bases: Photoshop event () The event identifier, a four-character code or a unique string. eventClass () The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects. eventFile () -> Path The path to the file to execute when the event occurs and activates the notifier. remove () Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information.","title":" notifier"},{"location":"photoshop/api/_notifier/#photoshop.api._notifier","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property","title":"_notifier"},{"location":"photoshop/api/_notifier/#photoshop.api._notifier.Notifier","text":"Bases: Photoshop","title":"Notifier"},{"location":"photoshop/api/_notifier/#photoshop.api._notifier.Notifier.event","text":"The event identifier, a four-character code or a unique string.","title":"event()"},{"location":"photoshop/api/_notifier/#photoshop.api._notifier.Notifier.eventClass","text":"The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects.","title":"eventClass()"},{"location":"photoshop/api/_notifier/#photoshop.api._notifier.Notifier.eventFile","text":"The path to the file to execute when the event occurs and activates the notifier.","title":"eventFile()"},{"location":"photoshop/api/_notifier/#photoshop.api._notifier.Notifier.remove","text":"Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information.","title":"remove()"},{"location":"photoshop/api/_notifiers/","text":"photoshop.api._notifiers The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property.","title":" notifiers"},{"location":"photoshop/api/_notifiers/#photoshop.api._notifiers","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property.","title":"_notifiers"},{"location":"photoshop/api/_preferences/","text":"","title":" preferences"},{"location":"photoshop/api/_selection/","text":"photoshop.api._selection The selected area of the document or layer. Selection Bases: Photoshop contract ( contract_by ) Contracts the selection. expand ( by ) Expands the selection. Parameters: Name Type Description Default by int The amount to expand the selection. required feather ( by ) Feathers the edges of the selection. Parameters: Name Type Description Default by int The amount to feather the edge. required fill ( fill_type : SolidColor , mode : ColorBlendMode , opacity , preserve_transparency ) Fills the selection. grow ( tolerance , anti_alias ) Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: Name Type Description Default tolerance int The tolerance range. Range: 0 to 255. required anti_alias bool If true, anti-aliasing is used. required invert () Inverts the selection. load ( from_channel , combination , inverting ) Loads the selection from the specified channel. makeWorkPath ( tolerance ) Makes this selection item the workpath for this document. resize ( horizontal , vertical , anchor ) Resizes the selected area to the specified dimensions and anchor position. resizeBoundary ( horizontal , vertical , anchor ) Scales the boundary of the selection. rotate ( angle , anchor ) Rotates the object. rotateBoundary ( angle , anchor ) Rotates the boundary of the selection. selectBorder ( width ) Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: Name Type Description Default width int The width of the border selection. required smooth ( radius ) Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels). store ( into , combination ) Saves the selection as a channel. stroke ( strokeColor , width , location , mode , opacity , preserveTransparency ) Strokes the selection. Parameters: Name Type Description Default strokeColor SolidColor The color to stroke the selection with. required width int The stroke width. required location int The stroke location. required mode int The color blend mode. required opacity int The opacity of the stroke color as a percentage. Range: 1 to 100. required preserveTransparency bool If true, preserves transparency. required translate ( deltaX , deltaY ) Moves the object relative to its current position. translateBoundary ( deltaX , deltaY ) Moves the boundary of selection relative to its current position.","title":" selection"},{"location":"photoshop/api/_selection/#photoshop.api._selection","text":"The selected area of the document or layer.","title":"_selection"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection","text":"Bases: Photoshop","title":"Selection"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.contract","text":"Contracts the selection.","title":"contract()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.expand","text":"Expands the selection. Parameters: Name Type Description Default by int The amount to expand the selection. required","title":"expand()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.feather","text":"Feathers the edges of the selection. Parameters: Name Type Description Default by int The amount to feather the edge. required","title":"feather()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.fill","text":"Fills the selection.","title":"fill()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.grow","text":"Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: Name Type Description Default tolerance int The tolerance range. Range: 0 to 255. required anti_alias bool If true, anti-aliasing is used. required","title":"grow()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.invert","text":"Inverts the selection.","title":"invert()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.load","text":"Loads the selection from the specified channel.","title":"load()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.makeWorkPath","text":"Makes this selection item the workpath for this document.","title":"makeWorkPath()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.resize","text":"Resizes the selected area to the specified dimensions and anchor position.","title":"resize()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.resizeBoundary","text":"Scales the boundary of the selection.","title":"resizeBoundary()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.rotate","text":"Rotates the object.","title":"rotate()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.rotateBoundary","text":"Rotates the boundary of the selection.","title":"rotateBoundary()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.selectBorder","text":"Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: Name Type Description Default width int The width of the border selection. required","title":"selectBorder()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.smooth","text":"Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels).","title":"smooth()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.store","text":"Saves the selection as a channel.","title":"store()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.stroke","text":"Strokes the selection. Parameters: Name Type Description Default strokeColor SolidColor The color to stroke the selection with. required width int The stroke width. required location int The stroke location. required mode int The color blend mode. required opacity int The opacity of the stroke color as a percentage. Range: 1 to 100. required preserveTransparency bool If true, preserves transparency. required","title":"stroke()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.translate","text":"Moves the object relative to its current position.","title":"translate()"},{"location":"photoshop/api/_selection/#photoshop.api._selection.Selection.translateBoundary","text":"Moves the boundary of selection relative to its current position.","title":"translateBoundary()"},{"location":"photoshop/api/_text_fonts/","text":"","title":" text fonts"},{"location":"photoshop/api/action_descriptor/","text":"photoshop.api.action_descriptor A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide. ActionDescriptor Bases: Photoshop clear () Clears the descriptor. count () The number of keys contained in the descriptor. erase ( key : int ) Erases a key form the descriptor. fromStream ( value : str ) Create a descriptor from a stream of bytes. for reading from disk. getBoolean ( key : int ) -> int Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean. getClass ( key ) Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class. getData ( key : int ) -> int Gets raw byte data as a string value. getDouble ( key : int ) -> int Gets the value of a key of type double. getEnumerationType ( index : int ) -> int Gets the enumeration type of a key. getEnumerationValue ( index : int ) -> int Gets the enumeration value of a key. getInteger ( index : int ) -> int Gets the value of a key of type integer. getKey ( index : int ) -> int Gets the ID of the key provided by index. getLargeInteger ( index : int ) -> int Gets the value of a key of type large integer. getList ( index : int ) -> ActionList Gets the value of a key of type list. getObjectType ( key : int ) -> int Gets the class ID of an object in a key of type object. getObjectValue ( key : int ) -> int Get the class ID of an object in a key of type object. getPath ( key : int ) -> Path Gets the value of a key of type. getReference ( key : int ) -> ActionReference Gets the value of a key of type. getString ( key : int ) -> str Gets the value of a key of type. getType ( key : int ) -> DescValueType Gets the type of a key. getUnitDoubleType ( key : int ) -> int Gets the unit type of a key of type UnitDouble. getUnitDoubleValue ( key : int ) -> int Gets the unit type of a key of type UnitDouble. hasKey ( key : int ) -> bool Checks whether the descriptor contains the provided key. isEqual ( otherDesc ) -> bool Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required putBoolean ( key : int , value : bool ) Sets the value for a key whose type is boolean. putClass ( key : int , value : int ) Sets the value for a key whose type is class. putData ( key : int , value : str ) Puts raw byte data as a string value. putDouble ( key : int , value : int ) Sets the value for a key whose type is double. putEnumerated ( key : int , enum_type : int , value : int ) Sets the enumeration type and value for a key. putInteger ( key : int , value : int ) Sets the value for a key whose type is integer. putLargeInteger ( key : int , value : int ) Sets the value for a key whose type is large integer. putList ( key : int , value : ActionList ) Sets the value for a key whose type is an ActionList object. putObject ( key : int , class_id : int , value ) Sets the value for a key whose type is an object. putPath ( key : int , value : str ) Sets the value for a key whose type is path. putReference ( key : int , value : ActionReference ) Sets the value for a key whose type is an object reference. putString ( key : int , value : str ) Sets the value for a key whose type is string. putUnitDouble ( key : int , unit_id : int , value : int ) Sets the value for a key whose type is a unit value formatted as double. toStream () -> str Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"Action descriptor"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor","text":"A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide.","title":"action_descriptor"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor","text":"Bases: Photoshop","title":"ActionDescriptor"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.clear","text":"Clears the descriptor.","title":"clear()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.count","text":"The number of keys contained in the descriptor.","title":"count()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.erase","text":"Erases a key form the descriptor.","title":"erase()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.fromStream","text":"Create a descriptor from a stream of bytes. for reading from disk.","title":"fromStream()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getBoolean","text":"Gets the text_font of a key of type boolean. Parameters: Name Type Description Default key str key of type boolean. required Returns: Name Type Description bool int The text_font of a key of type boolean.","title":"getBoolean()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getClass","text":"Gets the text_font of a key of type class. Parameters: Name Type Description Default key str The key of type class. required Returns: Name Type Description int The text_font of a key of type class.","title":"getClass()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getData","text":"Gets raw byte data as a string value.","title":"getData()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getDouble","text":"Gets the value of a key of type double.","title":"getDouble()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationType","text":"Gets the enumeration type of a key.","title":"getEnumerationType()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationValue","text":"Gets the enumeration value of a key.","title":"getEnumerationValue()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getInteger","text":"Gets the value of a key of type integer.","title":"getInteger()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getKey","text":"Gets the ID of the key provided by index.","title":"getKey()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getLargeInteger","text":"Gets the value of a key of type large integer.","title":"getLargeInteger()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getList","text":"Gets the value of a key of type list.","title":"getList()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getObjectType","text":"Gets the class ID of an object in a key of type object.","title":"getObjectType()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getObjectValue","text":"Get the class ID of an object in a key of type object.","title":"getObjectValue()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getPath","text":"Gets the value of a key of type.","title":"getPath()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getReference","text":"Gets the value of a key of type.","title":"getReference()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getString","text":"Gets the value of a key of type.","title":"getString()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getType","text":"Gets the type of a key.","title":"getType()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleType","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleType()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleValue","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleValue()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.hasKey","text":"Checks whether the descriptor contains the provided key.","title":"hasKey()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.isEqual","text":"Determines whether the descriptor is the same as another descriptor. Parameters: Name Type Description Default otherDesc .action_descriptor.ActionDescriptor required","title":"isEqual()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putBoolean","text":"Sets the value for a key whose type is boolean.","title":"putBoolean()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putClass","text":"Sets the value for a key whose type is class.","title":"putClass()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putData","text":"Puts raw byte data as a string value.","title":"putData()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putDouble","text":"Sets the value for a key whose type is double.","title":"putDouble()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putEnumerated","text":"Sets the enumeration type and value for a key.","title":"putEnumerated()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putInteger","text":"Sets the value for a key whose type is integer.","title":"putInteger()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putLargeInteger","text":"Sets the value for a key whose type is large integer.","title":"putLargeInteger()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putList","text":"Sets the value for a key whose type is an ActionList object.","title":"putList()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putObject","text":"Sets the value for a key whose type is an object.","title":"putObject()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putPath","text":"Sets the value for a key whose type is path.","title":"putPath()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putReference","text":"Sets the value for a key whose type is an object reference.","title":"putReference()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putString","text":"Sets the value for a key whose type is string.","title":"putString()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putUnitDouble","text":"Sets the value for a key whose type is a unit value formatted as double.","title":"putUnitDouble()"},{"location":"photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.toStream","text":"Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"toStream()"},{"location":"photoshop/api/action_list/","text":"photoshop.api.action_list This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop.","title":"Action list"},{"location":"photoshop/api/action_list/#photoshop.api.action_list","text":"This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop.","title":"action_list"},{"location":"photoshop/api/action_reference/","text":"photoshop.api.action_reference This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor. ActionReference Bases: Photoshop getForm () -> ReferenceFormType Gets the form of this action reference. getIdentifier () -> int Gets the identifier value for a reference whose form is identifier. getIndex () -> int Gets the index value for a reference in a list or array, putEnumerated ( desired_class , enum_type , value ) Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"Action reference"},{"location":"photoshop/api/action_reference/#photoshop.api.action_reference","text":"This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor.","title":"action_reference"},{"location":"photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference","text":"Bases: Photoshop","title":"ActionReference"},{"location":"photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.getForm","text":"Gets the form of this action reference.","title":"getForm()"},{"location":"photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.getIdentifier","text":"Gets the identifier value for a reference whose form is identifier.","title":"getIdentifier()"},{"location":"photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.getIndex","text":"Gets the index value for a reference in a list or array,","title":"getIndex()"},{"location":"photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.putEnumerated","text":"Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"putEnumerated()"},{"location":"photoshop/api/application/","text":"photoshop.api.application The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\") Application Bases: Photoshop backgroundColor ( color ) Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required batch ( * args , ** kwargs ) Runs the batch automation routine. Similar to the File > Automate > Batch command. beep () Causes a \"beep\" sound. build () changeProgressText ( text ) Changes the text that appears in the progress window. colorSettings ( settings ) The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required currentTool ( tool_name ) Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required displayDialogs ( dialog_mode : DialogModes ) The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs. doAction ( action , action_from ) Plays the specified action from the Actions palette. doProgress ( title , javascript ) Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required doProgressTask ( index , javascript ) Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. documents () -> Documents ._documents.Documents: The Documents instance. eraseCustomOptions ( key ) Removes the specified user objects from the Photoshop registry. featureEnabled ( name ) Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial foregroundColor ( color : SolidColor ) Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required freeMemory () -> float The amount of unused memory available to . getCustomOptions ( key ) Retrieves user objects in the Photoshop registry for the ID with value key. load ( document_file_path ) Loads a support document. locale () -> str The language locale of the application. macintoshFileTypes () -> List [ str ] A list of the image file types Photoshop can open. measurementLog () The log of measurements taken. notifiers () The notifiers currently configured (in the Scripts Events Manager menu in the application). parent () The object\u2019s container. path () purge ( target ) Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required refresh () Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method. refreshFonts () Force the font list to get refreshed. runMenuItem ( menu_id ) Run a menu item given the menu ID. showColorPicker () Returns false if dialog is cancelled, true otherwise. togglePalettes () Toggle palette visibility.","title":"Application"},{"location":"photoshop/api/application/#photoshop.api.application","text":"The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\")","title":"application"},{"location":"photoshop/api/application/#photoshop.api.application.Application","text":"Bases: Photoshop","title":"Application"},{"location":"photoshop/api/application/#photoshop.api.application.Application.backgroundColor","text":"Sets the default background color and color style for documents. Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"backgroundColor()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.batch","text":"Runs the batch automation routine. Similar to the File > Automate > Batch command.","title":"batch()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.beep","text":"Causes a \"beep\" sound.","title":"beep()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.build","text":"","title":"build()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.changeProgressText","text":"Changes the text that appears in the progress window.","title":"changeProgressText()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.colorSettings","text":"The name of the current color settings. Parameters: Name Type Description Default settings str The name of the current tool sel. required","title":"colorSettings()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.currentTool","text":"Sets the current tool for select. Parameters: Name Type Description Default tool_name str The name of the current tool sel. required","title":"currentTool()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.displayDialogs","text":"The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.","title":"displayDialogs()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.doAction","text":"Plays the specified action from the Actions palette.","title":"doAction()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.doProgress","text":"Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: Name Type Description Default title str String to show in the progress window. required javascript str JavaScriptString to execute. required","title":"doProgress()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.doProgressTask","text":"Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.","title":"doProgressTask()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.documents","text":"._documents.Documents: The Documents instance.","title":"documents()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.eraseCustomOptions","text":"Removes the specified user objects from the Photoshop registry.","title":"eraseCustomOptions()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.featureEnabled","text":"Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial","title":"featureEnabled()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.foregroundColor","text":"Set the foregroundColor . Parameters: Name Type Description Default color .solid_color.SolidColor The SolidColor instance. required","title":"foregroundColor()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.freeMemory","text":"The amount of unused memory available to .","title":"freeMemory()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.getCustomOptions","text":"Retrieves user objects in the Photoshop registry for the ID with value key.","title":"getCustomOptions()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.load","text":"Loads a support document.","title":"load()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.locale","text":"The language locale of the application.","title":"locale()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.macintoshFileTypes","text":"A list of the image file types Photoshop can open.","title":"macintoshFileTypes()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.measurementLog","text":"The log of measurements taken.","title":"measurementLog()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.notifiers","text":"The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.path","text":"","title":"path()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.purge","text":"Purges one or more caches. Parameters: Name Type Description Default target .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. required","title":"purge()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.refresh","text":"Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method.","title":"refresh()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.refreshFonts","text":"Force the font list to get refreshed.","title":"refreshFonts()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.runMenuItem","text":"Run a menu item given the menu ID.","title":"runMenuItem()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.showColorPicker","text":"Returns false if dialog is cancelled, true otherwise.","title":"showColorPicker()"},{"location":"photoshop/api/application/#photoshop.api.application.Application.togglePalettes","text":"Toggle palette visibility.","title":"togglePalettes()"},{"location":"photoshop/api/constants/","text":"","title":"Constants"},{"location":"photoshop/api/enumerations/","text":"photoshop.api.enumerations constants type of enum for Photoshop.","title":"Enumerations"},{"location":"photoshop/api/enumerations/#photoshop.api.enumerations","text":"constants type of enum for Photoshop.","title":"enumerations"},{"location":"photoshop/api/errors/","text":"","title":"Errors"},{"location":"photoshop/api/event_id/","text":"","title":"Event id"},{"location":"photoshop/api/solid_color/","text":"photoshop.api.solid_color A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() . SolidColor Bases: Photoshop isEqual ( color : RGBColor ) SolidColor object is visually equal to the specified color. model ( value : ColorModel ) The color model. nearestWebColor () -> RGBColor The nearest web color to the current color.","title":"Solid color"},{"location":"photoshop/api/solid_color/#photoshop.api.solid_color","text":"A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() .","title":"solid_color"},{"location":"photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor","text":"Bases: Photoshop","title":"SolidColor"},{"location":"photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.isEqual","text":"SolidColor object is visually equal to the specified color.","title":"isEqual()"},{"location":"photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.model","text":"The color model.","title":"model()"},{"location":"photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.nearestWebColor","text":"The nearest web color to the current color.","title":"nearestWebColor()"},{"location":"photoshop/api/text_font/","text":"","title":"Text font"},{"location":"photoshop/api/text_item/","text":"","title":"Text item"},{"location":"photoshop/api/colors/","text":"photoshop.api.colors GrayColor Bases: Photoshop gray ( value : float ) The gray value. cmyk Defines a CMYK color, used in the SolidColor object. gray Defines a gray color, used in the SolidColor object. GrayColor Bases: Photoshop gray ( value : float ) The gray value. hsb Defines an HSB color, used in the SolidColor object.","title":"Index"},{"location":"photoshop/api/colors/#photoshop.api.colors","text":"","title":"colors"},{"location":"photoshop/api/colors/#photoshop.api.colors.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/api/colors/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/api/colors/#photoshop.api.colors.cmyk","text":"Defines a CMYK color, used in the SolidColor object.","title":"cmyk"},{"location":"photoshop/api/colors/#photoshop.api.colors.gray","text":"Defines a gray color, used in the SolidColor object.","title":"gray"},{"location":"photoshop/api/colors/#photoshop.api.colors.gray.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/api/colors/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/api/colors/#photoshop.api.colors.hsb","text":"Defines an HSB color, used in the SolidColor object.","title":"hsb"},{"location":"photoshop/api/colors/cmyk/","text":"photoshop.api.colors.cmyk Defines a CMYK color, used in the SolidColor object.","title":"Cmyk"},{"location":"photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk","text":"Defines a CMYK color, used in the SolidColor object.","title":"cmyk"},{"location":"photoshop/api/colors/gray/","text":"photoshop.api.colors.gray Defines a gray color, used in the SolidColor object. GrayColor Bases: Photoshop gray ( value : float ) The gray value.","title":"Gray"},{"location":"photoshop/api/colors/gray/#photoshop.api.colors.gray","text":"Defines a gray color, used in the SolidColor object.","title":"gray"},{"location":"photoshop/api/colors/gray/#photoshop.api.colors.gray.GrayColor","text":"Bases: Photoshop","title":"GrayColor"},{"location":"photoshop/api/colors/gray/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"photoshop/api/colors/hsb/","text":"photoshop.api.colors.hsb Defines an HSB color, used in the SolidColor object.","title":"Hsb"},{"location":"photoshop/api/colors/hsb/#photoshop.api.colors.hsb","text":"Defines an HSB color, used in the SolidColor object.","title":"hsb"},{"location":"photoshop/api/colors/lab/","text":"","title":"Lab"},{"location":"photoshop/api/colors/rgb/","text":"","title":"Rgb"},{"location":"photoshop/api/open_options/","text":"photoshop.api.open_options EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() eps EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"Index"},{"location":"photoshop/api/open_options/#photoshop.api.open_options","text":"","title":"open_options"},{"location":"photoshop/api/open_options/#photoshop.api.open_options.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/api/open_options/#photoshop.api.open_options.eps","text":"","title":"eps"},{"location":"photoshop/api/open_options/#photoshop.api.open_options.eps.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/api/open_options/eps/","text":"photoshop.api.open_options.eps EPSOpenOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"Eps"},{"location":"photoshop/api/open_options/eps/#photoshop.api.open_options.eps","text":"","title":"eps"},{"location":"photoshop/api/open_options/eps/#photoshop.api.open_options.eps.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"photoshop/api/save_options/","text":"photoshop.api.save_options BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. ExportOptionsSaveForWeb Bases: Photoshop colors ( value ) The number of colors in the palette. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat. TiffSaveOptions Bases: Photoshop layerCompression ( value ) The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true. transparency ( value ) If true, saves the transparency as an additional alpha channel when the file is opened in another application. bmp Options for saving a document in BMO format. BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not. eps EPSSaveOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() embedColorProfile ( boolean : bool ) True to embed the color profile in this document. transparentWhites ( value : bool ) True to display white areas as transparent vectorData ( value : bool ) True to include vector data. Valid only if the document includes vector data (text). pdf Options for saving a document in Adobe PDF format. using the Document.saveAs() method. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat.","title":"Index"},{"location":"photoshop/api/save_options/#photoshop.api.save_options","text":"","title":"save_options"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.ExportOptionsSaveForWeb","text":"Bases: Photoshop","title":"ExportOptionsSaveForWeb"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colors","text":"The number of colors in the palette.","title":"colors()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.TiffSaveOptions","text":"Bases: Photoshop","title":"TiffSaveOptions"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.tif.TiffSaveOptions.layerCompression","text":"The method of compression to use when saving layers (as opposed to saving composite data). Valid only when layers = true.","title":"layerCompression()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.tif.TiffSaveOptions.transparency","text":"If true, saves the transparency as an additional alpha channel when the file is opened in another application.","title":"transparency()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.bmp","text":"Options for saving a document in BMO format.","title":"bmp"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.bmp.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.eps","text":"","title":"eps"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.eps.EPSSaveOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSSaveOptions"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.eps.EPSSaveOptions.embedColorProfile","text":"True to embed the color profile in this document.","title":"embedColorProfile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.eps.EPSSaveOptions.transparentWhites","text":"True to display white areas as transparent","title":"transparentWhites()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.eps.EPSSaveOptions.vectorData","text":"True to include vector data. Valid only if the document includes vector data (text).","title":"vectorData()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf","text":"Options for saving a document in Adobe PDF format. using the Document.saveAs() method.","title":"pdf"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/api/save_options/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/api/save_options/bmp/","text":"photoshop.api.save_options.bmp Options for saving a document in BMO format. BMPSaveOptions Bases: Photoshop alphaChannels ( value ) Sets whether to save the alpha channels or not.","title":"Bmp"},{"location":"photoshop/api/save_options/bmp/#photoshop.api.save_options.bmp","text":"Options for saving a document in BMO format.","title":"bmp"},{"location":"photoshop/api/save_options/bmp/#photoshop.api.save_options.bmp.BMPSaveOptions","text":"Bases: Photoshop","title":"BMPSaveOptions"},{"location":"photoshop/api/save_options/bmp/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"Sets whether to save the alpha channels or not.","title":"alphaChannels()"},{"location":"photoshop/api/save_options/eps/","text":"photoshop.api.save_options.eps EPSSaveOptions Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() embedColorProfile ( boolean : bool ) True to embed the color profile in this document. transparentWhites ( value : bool ) True to display white areas as transparent vectorData ( value : bool ) True to include vector data. Valid only if the document includes vector data (text).","title":"Eps"},{"location":"photoshop/api/save_options/eps/#photoshop.api.save_options.eps","text":"","title":"eps"},{"location":"photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSSaveOptions"},{"location":"photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions.embedColorProfile","text":"True to embed the color profile in this document.","title":"embedColorProfile()"},{"location":"photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions.transparentWhites","text":"True to display white areas as transparent","title":"transparentWhites()"},{"location":"photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions.vectorData","text":"True to include vector data. Valid only if the document includes vector data (text).","title":"vectorData()"},{"location":"photoshop/api/save_options/gif/","text":"","title":"Gif"},{"location":"photoshop/api/save_options/jpg/","text":"","title":"Jpg"},{"location":"photoshop/api/save_options/pdf/","text":"photoshop.api.save_options.pdf Options for saving a document in Adobe PDF format. using the Document.saveAs() method. PDFSaveOptions Bases: Photoshop alphaChannels ( value ) True to save the alpha channels with the file. annotations ( value ) If true, the annotations are saved. colorConversion ( value ) If true, converts the color profile to the destination profile. convertToEightBit ( value ) If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description ( text ) Description of the save options in use. destinationProfile ( value ) Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample ( value ) The downsample method to use. downSampleSize ( value ) The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019. downSampleSizeLimit ( value : float ) Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile ( value : bool ) If true, the color profile is embedded in the document. embedThumbnail ( value : bool ) If true, includes a small preview image in Acrobat. encoding ( value : str ) The encoding method to use. jpegQuality ( quality : int ) Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12. layers ( value : bool ) If true, the layers are saved. optimizeForWeb ( value : bool ) If true, improves performance of PDFs on Web servers. outputCondition ( value ) An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID ( value ) The identifier for the output condition. preserveEditing ( value ) If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile ( file_name ) The preset file to use for settings; overrides other settings. profileInclusionPolicy ( value ) If true, shows which profiles to include. registryName ( value ) The URL where the output condition is registered. spotColors ( value ) If true, the spot colors are saved. tileSize ( value ) The compression option. Valid only when encoding is JPEG2000. view ( value ) If true, opens the saved PDF in Acrobat.","title":"Pdf"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf","text":"Options for saving a document in Adobe PDF format. using the Document.saveAs() method.","title":"pdf"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions","text":"Bases: Photoshop","title":"PDFSaveOptions"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for \u2018down sample size limit\u2019.","title":"downSampleSize()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Set the quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"photoshop/api/save_options/png/","text":"","title":"Png"},{"location":"photoshop/api/save_options/psd/","text":"","title":"Psd"},{"location":"photoshop/api/save_options/tag/","text":"","title":"Tag"},{"location":"photoshop/api/save_options/tif/","text":"","title":"Tif"}]}